{
  "hash": "fc6c27effc37dac2ea48b183f2c5f12f",
  "result": {
    "markdown": "## Load packages\n\nFirst, we need to load the `tidyverse` packages, since we'll be using example data and several functions that come in the `tidyverse`. If you're running this on your own computer rather than in the cloud instance we set up, you may need to run `install.packages(\"tidyverse\")` first if you haven't ever used the tidyverse packages before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n## The data\n\nLet's take a look at the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(msleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n  name  genus vore  order conse…¹ sleep…² sleep…³ sleep…⁴ awake  brainwt  bodywt\n  <chr> <chr> <chr> <chr> <chr>     <dbl>   <dbl>   <dbl> <dbl>    <dbl>   <dbl>\n1 Chee… Acin… carni Carn… lc         12.1    NA    NA      11.9 NA        50    \n2 Owl … Aotus omni  Prim… <NA>       17       1.8  NA       7    0.0155    0.48 \n3 Moun… Aplo… herbi Rode… nt         14.4     2.4  NA       9.6 NA         1.35 \n4 Grea… Blar… omni  Sori… lc         14.9     2.3   0.133   9.1  0.00029   0.019\n5 Cow   Bos   herbi Arti… domest…     4       0.7   0.667  20    0.423   600    \n6 Thre… Brad… herbi Pilo… <NA>       14.4     2.2   0.767   9.6 NA         3.85 \n# … with abbreviated variable names ¹​conservation, ²​sleep_total, ³​sleep_rem,\n#   ⁴​sleep_cycle\n```\n:::\n:::\n\n\nNote that this is one of the example datasets that comes built-in when you install the `tidyverse` set of packages, so it's already available to you without you having to read it in or download anything.\n\nTo learn more about this dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?msleep\n```\n:::\n\n\n## How to check for missing values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(msleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     name              genus               vore              order          \n Length:83          Length:83          Length:83          Length:83         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n conservation        sleep_total      sleep_rem      sleep_cycle    \n Length:83          Min.   : 1.90   Min.   :0.100   Min.   :0.1167  \n Class :character   1st Qu.: 7.85   1st Qu.:0.900   1st Qu.:0.1833  \n Mode  :character   Median :10.10   Median :1.500   Median :0.3333  \n                    Mean   :10.43   Mean   :1.875   Mean   :0.4396  \n                    3rd Qu.:13.75   3rd Qu.:2.400   3rd Qu.:0.5792  \n                    Max.   :19.90   Max.   :6.600   Max.   :1.5000  \n                                    NA's   :22      NA's   :51      \n     awake          brainwt            bodywt        \n Min.   : 4.10   Min.   :0.00014   Min.   :   0.005  \n 1st Qu.:10.25   1st Qu.:0.00290   1st Qu.:   0.174  \n Median :13.90   Median :0.01240   Median :   1.670  \n Mean   :13.57   Mean   :0.28158   Mean   : 166.136  \n 3rd Qu.:16.15   3rd Qu.:0.12550   3rd Qu.:  41.750  \n Max.   :22.10   Max.   :5.71200   Max.   :6654.000  \n                 NA's   :27                          \n```\n:::\n:::\n\n\nNotice the bottom row of the summary statistics for `sleep_rem`, `sleep_cycle` and `brainwt`. It gives the count of `NA` values for each variable. The other numeric variables (`sleep_total`, `awake`, and `bodywt`) don't show anything for the `NA` count, which means they have no missing values.\n\nThe `summary` command is most useful for numeric and factor variables. It doesn't show us anything useful for the character variables. We can get better output for those by converting them to factors, though.\n\nWe could do this with a `mutate` command for each of the rows we want to convert, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep_clean <- msleep %>%\n  mutate(name = as.factor(name),\n         genus = as.factor(genus),\n         vore = as.factor(vore),\n         order = as.factor(order),\n         conservation = as.factor(conservation))\n```\n:::\n\n\nBut in cases like this where we want to convert several variables all in the same way, we can do it faster with the `across` command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep_clean <- msleep %>%\n  mutate(across(where(is.character), as.factor))\n```\n:::\n\n\nLet's break that down. We're using the `across` command to do the same thing across several columns. The first argument of `across` needs to tell it which columns to use. Here, we're telling it which columns to use with `where(is.character)` --- that will check each column against the test `is.character` and return `TRUE` if the column is of type character and `FALSE` if it's anything else. `where(is.character)` will therefore give us a list of all of the columns that are character columns. The second argument of `across` is what you want done to those columns. Here, we're saying we want it to apply the function `as.factor`. So taken together, this `mutate` command will pick all the columns from the data that are of type character and convert them to factor. Handy!\n\nNote that either way of converting these columns (either individually, or all at once using the `across` function) will result in the same clean dataframe.\n\nTo learn more about `across` see its help documentation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?across\n```\n:::\n\n\nNow let's try `summary` again to see if we get more informative results for those first few columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(msleep_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        name             genus         vore   \n African elephant         : 1   Panthera    : 3   carni  :19  \n African giant pouched rat: 1   Spermophilus: 3   herbi  :32  \n African striped mouse    : 1   Equus       : 2   insecti: 5  \n Arctic fox               : 1   Vulpes      : 2   omni   :20  \n Arctic ground squirrel   : 1   Acinonyx    : 1   NA's   : 7  \n Asian elephant           : 1   Aotus       : 1               \n (Other)                  :77   (Other)     :71               \n          order          conservation  sleep_total      sleep_rem    \n Rodentia    :22   cd          : 2    Min.   : 1.90   Min.   :0.100  \n Carnivora   :12   domesticated:10    1st Qu.: 7.85   1st Qu.:0.900  \n Primates    :12   en          : 4    Median :10.10   Median :1.500  \n Artiodactyla: 6   lc          :27    Mean   :10.43   Mean   :1.875  \n Soricomorpha: 5   nt          : 4    3rd Qu.:13.75   3rd Qu.:2.400  \n Cetacea     : 3   vu          : 7    Max.   :19.90   Max.   :6.600  \n (Other)     :23   NA's        :29                    NA's   :22     \n  sleep_cycle         awake          brainwt            bodywt        \n Min.   :0.1167   Min.   : 4.10   Min.   :0.00014   Min.   :   0.005  \n 1st Qu.:0.1833   1st Qu.:10.25   1st Qu.:0.00290   1st Qu.:   0.174  \n Median :0.3333   Median :13.90   Median :0.01240   Median :   1.670  \n Mean   :0.4396   Mean   :13.57   Mean   :0.28158   Mean   : 166.136  \n 3rd Qu.:0.5792   3rd Qu.:16.15   3rd Qu.:0.12550   3rd Qu.:  41.750  \n Max.   :1.5000   Max.   :22.10   Max.   :5.71200   Max.   :6654.000  \n NA's   :51                       NA's   :27                          \n```\n:::\n:::\n\n\n\nLet's use `filter` to take a look at just the rows that have missing values for the brainwt variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(msleep_clean, brainwt == NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 11\n# … with 11 variables: name <fct>, genus <fct>, vore <fct>, order <fct>,\n#   conservation <fct>, sleep_total <dbl>, sleep_rem <dbl>, sleep_cycle <dbl>,\n#   awake <dbl>, brainwt <dbl>, bodywt <dbl>\n```\n:::\n:::\n\n\nThat doesn't work!\n\nIn fact, you may even have noticed a little warning sign appear at the left side of your screen, next to the line number with that code. If you hover your mouse over the warning sign, you'll see a message that says \"use 'is.na' to check whether an expression evaluates to NA\" --- that's because this is a very common mistake. Most people try `== NA` and `!= NA` to test whether something is or isn't missing, respectively, before they realize R won't allow that.\n\nInstead, to test whether something is missing, we have to use the `is.na()` function. You can negate the function with `!`, so `!is.na()` tests whether something is NOT missing (i.e. if there is present data there).\n\nSo, let's try again to filter the data to just show rows where we have missing values for `brainwt`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(msleep_clean, is.na(brainwt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 27 × 11\n   name  genus vore  order conse…¹ sleep…² sleep…³ sleep…⁴ awake brainwt  bodywt\n   <fct> <fct> <fct> <fct> <fct>     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>\n 1 Chee… Acin… carni Carn… lc         12.1    NA    NA      11.9      NA  50    \n 2 Moun… Aplo… herbi Rode… nt         14.4     2.4  NA       9.6      NA   1.35 \n 3 Thre… Brad… herbi Pilo… <NA>       14.4     2.2   0.767   9.6      NA   3.85 \n 4 Nort… Call… carni Carn… vu          8.7     1.4   0.383  15.3      NA  20.5  \n 5 Vesp… Calo… <NA>  Rode… <NA>        7      NA    NA      17        NA   0.045\n 6 Griv… Cerc… omni  Prim… lc         10       0.7  NA      14        NA   4.75 \n 7 West… Euta… herbi Rode… <NA>       14.9    NA    NA       9.1      NA   0.071\n 8 Gira… Gira… herbi Arti… cd          1.9     0.4  NA      22.1      NA 900.   \n 9 Pilo… Glob… carni Ceta… cd          2.7     0.1  NA      21.4      NA 800    \n10 Mong… Lemur herbi Prim… vu          9.5     0.9  NA      14.5      NA   1.67 \n# … with 17 more rows, and abbreviated variable names ¹​conservation,\n#   ²​sleep_total, ³​sleep_rem, ⁴​sleep_cycle\n```\n:::\n:::\n\n\nNow fill in the partial code below to filter the data to just look at rows that **aren't** missing for `brainwt`. (Remember if you get stuck, you can always look at the solutions file.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(msleep_clean, !is.na(brainwt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 56 × 11\n   name  genus vore  order conse…¹ sleep…² sleep…³ sleep…⁴ awake brainwt  bodywt\n   <fct> <fct> <fct> <fct> <fct>     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>\n 1 Owl … Aotus omni  Prim… <NA>       17       1.8  NA       7   0.0155    0.48 \n 2 Grea… Blar… omni  Sori… lc         14.9     2.3   0.133   9.1 0.00029   0.019\n 3 Cow   Bos   herbi Arti… domest…     4       0.7   0.667  20   0.423   600    \n 4 Dog   Canis carni Carn… domest…    10.1     2.9   0.333  13.9 0.07     14    \n 5 Roe … Capr… herbi Arti… lc          3      NA    NA      21   0.0982   14.8  \n 6 Goat  Capri herbi Arti… lc          5.3     0.6  NA      18.7 0.115    33.5  \n 7 Guin… Cavis herbi Rode… domest…     9.4     0.8   0.217  14.6 0.0055    0.728\n 8 Chin… Chin… herbi Rode… domest…    12.5     1.5   0.117  11.5 0.0064    0.42 \n 9 Star… Cond… omni  Sori… lc         10.3     2.2  NA      13.7 0.001     0.06 \n10 Afri… Cric… omni  Rode… <NA>        8.3     2    NA      15.7 0.0066    1    \n# … with 46 more rows, and abbreviated variable names ¹​conservation,\n#   ²​sleep_total, ³​sleep_rem, ⁴​sleep_cycle\n```\n:::\n:::\n\n\n\n**RETURN TO THE MODULE NOW** Read the overview of the next section before continuing on with this code.\n\n\n## Assigning values to missing\n\nLet's pretend you know that these data were only recorded over an 18 hour period, so it would have been impossible to have a total sleep time of greater than 18. And yet, when we look at the data, we see there are a few animals with `sleep_total` over 18:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary of the sleep_total variable\nsummary(msleep_clean$sleep_total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.90    7.85   10.10   10.43   13.75   19.90 \n```\n:::\n\n```{.r .cell-code}\n# show just the rows of msleep_clean where sleep_total is greater than 18\nfilter(msleep_clean, sleep_total > 18)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 11\n  name    genus vore  order conse…¹ sleep…² sleep…³ sleep…⁴ awake brainwt bodywt\n  <fct>   <fct> <fct> <fct> <fct>     <dbl>   <dbl>   <dbl> <dbl>   <dbl>  <dbl>\n1 Big br… Epte… inse… Chir… lc         19.7     3.9   0.117   4.3  3  e-4  0.023\n2 Thick-… Lutr… carni Dide… lc         19.4     6.6  NA       4.6 NA       0.37 \n3 Little… Myot… inse… Chir… <NA>       19.9     2     0.2     4.1  2.5e-4  0.01 \n4 Giant … Prio… inse… Cing… en         18.1     6.1  NA       5.9  8.1e-2 60    \n# … with abbreviated variable names ¹​conservation, ²​sleep_total, ³​sleep_rem,\n#   ⁴​sleep_cycle\n```\n:::\n:::\n\n\nThese must be typos or some other kind of error, so you want to exclude them from your analysis.\n\nOne option would be to filter these rows out of the data completely, so these animals are completely excluded from analysis. But perhaps you think the other data recorded for these animals is correct, you just think the `sleep_total` values are wrong. If you remove just those suspicious values, then you can keep the rest of the data for those rows intact in case you need it.\n\nFill in this code to mark values for `sleep_total` that are over 18 as missing (remember you can look at the solutions file if you get stuck!):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep_clean <- mutate(msleep_clean, sleep_total = ifelse(sleep_total > 18, NA, sleep_total))\n```\n:::\n\n\nTo check that it worked, let's look at the updated summary stats for `sleep_total`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(msleep_clean$sleep_total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  1.900   7.350  10.100   9.986  12.900  18.000       4 \n```\n:::\n:::\n\n\nYou should see that the Max value is now under 18, and you should see some NAs. Great!\n\n\n**RETURN TO THE MODULE NOW** Read the overview of the next section before continuing on with this code.\n\n\n## Working around missing values\n\n### na.rm\n\nMany functions in R have an argument `na.rm` with options `TRUE` or `FALSE`.\n\nFor example, check out the help documentation for `mean`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n\nUnder **Arguments**, you'll see the description for `na.rm` is\n\n> a logical value indicating whether NA values should be stripped before the computation proceeds.\n\nIn other words, do you want to exclude missing observations and just do the calculation based on the available data? The default value is `na.rm = FALSE`, which means \"no, don't exclude missing values\".\n\nLet's try it with the `brainwt` variable in our example data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(msleep_clean$brainwt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nThere are some missing values in `brainwt`, so right now R is trying to take the mean of several numbers and a handful of `NA`s --- there's no way to get an average for something that's not there, so the result is `NA`.\n\nTry modifying the code to change the behavior to `na.rm = TRUE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(msleep_clean$brainwt, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2815814\n```\n:::\n:::\n\n\nNow you should get a value! That's the average of the available data, ignoring the missing ones.\n\nYou'll see `na.rm` as an argument for many functions in R, often with the default set to `FALSE`, as it is for `mean`.\n\n### na.action\n\nFor more complex statistical functions, there's often an `na.action` argument instead of `na.rm`.\n\nWe'll start with the function `prcomp`, which is used to run Principal Components Analysis (PCA). For the purposes of this example, it's perfectly fine if you haven't run a PCA before, or even if you've never heard of it --- we'll just be using it as an example to explore how R handles missing values in statistical analyses.\n\nFirst, let's take a look at the help documentation for `prcomp`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?prcomp\n```\n:::\n\n\nLike many R functions, `prcomp` has an argument called `na.action` which controls what happens when the function encounters missing values. The possible options are usually `na.fail`, `na.omit`, and `na.exclude`. We can see from the help documentation that, unless you've changed some of your settings in R, the default option for `na.action` will be `na.omit`.\nIf we run `prcomp` without specifying anything for `na.action`, it will use this default behavior:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprcomp(~ sleep_total + sleep_rem + sleep_cycle + awake + brainwt + bodywt, data = msleep_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStandard deviations (1, .., p=6):\n[1] 1.489567e+02 3.761704e+00 7.519510e-01 3.805191e-01 1.201851e-01\n[6] 6.002791e-16\n\nRotation (n x k) = (6 x 6):\n                      PC1         PC2           PC3           PC4           PC5\nsleep_total -0.0158327092 -0.69703865 -0.1147937577 -0.0266145329 -0.0007088871\nsleep_rem   -0.0029128243 -0.16336621  0.9860671108  0.0276040539 -0.0145830861\nsleep_cycle  0.0010588988  0.02854292  0.0189719436 -0.8145802228 -0.5790365329\nawake        0.0158327092  0.69703865  0.1147937577  0.0266145329  0.0007088871\nbrainwt      0.0009084248  0.01613456  0.0309167733 -0.5781695415  0.8151705252\nbodywt       0.9997440770 -0.02259854 -0.0008111346  0.0006255871 -0.0001923544\n                      PC6\nsleep_total -7.071068e-01\nsleep_rem    7.736867e-16\nsleep_cycle  3.303090e-16\nawake       -7.071068e-01\nbrainwt      3.887407e-16\nbodywt       1.040834e-17\n```\n:::\n:::\n\n\nOne important thing to notice here: Nothing in the output tells you that `prcomp` excluded rows with missing values from the analysis. That is how many functions in R work, and it's one reason why it's important to look at the help documentation for functions you're using, so you can see what the function's default behavior for handling missingness is. Without checking the help documentation, you might (wrongly) think that this PCA output was based on all of the observations in your data, not just the complete cases.\n\nModify this code to run it with `na.fail` for the `na.action` instead:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprcomp(~ sleep_total + sleep_rem + sleep_cycle + awake + brainwt + bodywt, data = msleep_clean, na.action = na.fail)\n```\n:::\n\n\nYou should now see an error that includes the message \"missing values in object\". Some people prefer to use `na.fail` for most functions, because they want to see an error message whenever they have missing values rather than R just silently dropping them.\n\nSome R functions will show a warning by default when they remove cases with missing values. For example, let's use `ggplot` to create a scatterplot of `bodywt` and `brainwt`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(msleep_clean, aes(x=bodywt, y=brainwt)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](missing_values_solutions_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\nIt produces the scatterplot we asked for, but you'll also see a warning saying \"Removed 27 rows containing missing values (geom_point)\" to remind you that it's ignoring any observations that are missing for either of the two variables we're plotting. (Note that this warning will appear above the plot in the \"R Console\" box just below the code chunk rather than on the plot itself. If you run the ggplot code in the console instead of running it as a chunk in the rmd document, then the plot itself will appear in the Plots pane and the warning will print in the console.)\n\n### Other arguments for handling missingness\n\nSome functions have more complicated options for how to handle missingness. For example, if you want to get correlations (or covariances) for several variables in your data, you have several options. Let's take a look at the help documentation for `cor`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?cor\n```\n:::\n\n\nThere are two arguments related to missing values: `na.rm` and `use`. Scroll down to the **Details** section to read more about how they work. Note: The differences between the options is subtle, so don't stress if it feels like you don't understand what they all mean. In most cases, people want either `use = \"everything\"` or `use = \"pairwise.complete.obs\"` when they generate a correlation or covariance matrix, so those are the two most important options to focus on. Importantly, the default value for `use` is \"everything\".\n\nLet's look at a correlation matrix using the `msleep_clean` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(select(msleep_clean, sleep_total:bodywt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            sleep_total sleep_rem sleep_cycle     awake brainwt    bodywt\nsleep_total           1        NA          NA        NA      NA        NA\nsleep_rem            NA         1          NA        NA      NA        NA\nsleep_cycle          NA        NA           1        NA      NA        NA\nawake                NA        NA          NA 1.0000000      NA 0.3119801\nbrainwt              NA        NA          NA        NA       1        NA\nbodywt               NA        NA          NA 0.3119801      NA 1.0000000\n```\n:::\n:::\n\n\nSince we didn't supply anything for the `use` argument, it will be its default value, which is \"everything\". That returns an `NA` for any correlation where there were missing values on either of the two variables being compared.\n\nTry it again, but this time change the behavior to calculate correlations for all pairwise complete observations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(select(msleep_clean, sleep_total:bodywt), use = \"pairwise.complete.obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            sleep_total  sleep_rem sleep_cycle      awake    brainwt     bodywt\nsleep_total   1.0000000  0.7391767  -0.4422821 -0.9999982 -0.3794891 -0.3277455\nsleep_rem     0.7391767  1.0000000  -0.3381235 -0.7517713 -0.2213348 -0.3276507\nsleep_cycle  -0.4422821 -0.3381235   1.0000000  0.4737127  0.8516203  0.4178029\nawake        -0.9999982 -0.7517713   0.4737127  1.0000000  0.3604874  0.3119801\nbrainwt      -0.3794891 -0.2213348   0.8516203  0.3604874  1.0000000  0.9337822\nbodywt       -0.3277455 -0.3276507   0.4178029  0.3119801  0.9337822  1.0000000\n```\n:::\n:::\n\n\nTip: Many functions in R, including `cor`, allow you to abbreviate strings for arguments. You may have noticed in the help documentation that for `use` it says the following:\n\n> This must be (an abbreviation of) one of the strings \"everything\", \"all.obs\", \"complete.obs\", \"na.or.complete\", or \"pairwise.complete.obs\".\n\nSo, if you want to, you can just write `use = \"pairwise\"` or even just `use = \"p\"` and it will know you mean \"pairwise.complete.obs\". It's good practice to write out the whole argument, though, or at least enough of it so that your meaning is clear, so that your code is easier to read later (you may forget what `p` means, but `pairwise` may be enough for you or someone else reading your code to understand).\n\n\n**RETURN TO THE MODULE NOW** Read the overview of the next section before continuing on with this code.\n\n\n## Filtering out missing values\n\nIf you want a version of your data with no missing values in it, you can use `na.omit` to remove any rows with missing values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep_nomissing <- na.omit(msleep_clean)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(msleep_clean) # how many rows were in the original data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 83\n```\n:::\n\n```{.r .cell-code}\nnrow(msleep_nomissing) # how many complete rows are in the data (rows with no missing values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 19\n```\n:::\n:::\n\n\n`na.omit` removes rows with missing values on **any** variable. You might prefer to just pick which variable(s) you want complete data for, and only remove rows that have missing values in those key variables (potentially leaving rows that are missing on other variables).\n\nFor example, if we want to create a version of the data that doesn't have any missing values for `brainwt` (but allows missing values for other variables), we can do that with `filter`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep_nomissing_brainwt <- filter(msleep_clean, !is.na(brainwt))\n```\n:::\n",
    "supporting": [
      "missing_values_solutions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}