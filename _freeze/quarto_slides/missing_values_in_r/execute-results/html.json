{
  "hash": "257d2d14964b9568212b89b1a9d3c35a",
  "result": {
    "markdown": "---\ntitle: \"Missing Values <br> in R\"\nauthor: \"Rose Hartman\"\ninstitute: \"Arcus Education, DBHi\"\ndate: \"2024-03-04\"\n---\n\n\n-   Use keyboard arrow keys to\n    -   advance ( → ) and\n    -   go back ( ← )\n-   Type \"s\" to see speaker notes\n-   Type \"?\" to see other keyboard shortcuts\n\n\n::: {.cell}\n\n:::\n\n\n## Join the CHOP R User Group\n\n::: {.columns .v-center-container}\n::: {.column width=\"50%\"}\n![](media/chopr.png){fig-alt=\"CHOPR hex sticker logo\" width=\"100%\"}\n:::\n\n::: {.column width=\"50%\"}\n- Friendly help troubleshooting your R code\n- Announcements for upcoming talks, workshops, and conferences\n:::\n:::\n\nLink to join: [https://bit.ly/chopRusers](https://bit.ly/chopRusers)\n\n::: notes\nJust a few announcements before we get started. \nFor anyone here today that isn't already part of the CHOP R User group, I strongly encourage you to join (it is also open to Penn folks). The CHOP R User group has more than 500 members from all departments. This is great place to network with other R users, get help with coding problems, and learn about new packages, webinars, and conferences. We also have semi-regular meetings and workshops, like this one. \n\n:::\n\n## Come to R Office Hours!\n\n- Set up a meeting to get live help with your R code from our most experienced useRs\n- Office hours appointments can be one-on-one or open to the community\n\nLink to calendar: [https://bit.ly/chopROfficeHours](https://bit.ly/chopROfficeHours)\n\n::: aside\nWe're looking for more volunteers to lead appointments! Get in touch: hartmanr1@chop.edu\n:::\n\n::: notes\nWe also have regular office hours appointments available to get R help. \nWe're offering two kinds of appointments: one-on-one, if you want individual help, or open appointments that are more of a community conversation about whatever R questions people bring up that day. The open appointments can be particularly valuable to attend if you want to hear other people's questions about R but maybe don't have a project of your own that you're troubleshooting at the moment. \nWe set up a calendar online where you can book an appointment. \nAnd if you like this idea and you're an experienced R user yourself, consider joining us to offer appointments! It's just whatever times work for you, so we can set up a schedule around whatever other work you've got going on. Reach out to me via email or slack for details.  \n:::\n\n## Coming soon! \n\nThis is the first talk in a new series called **R102: MasteRing the Fundamentals** \n\n<br>\n\nLearn more about this new series, including dates and titles for each session: \n<br>\n[https://arcus.github.io/r102/](https://arcus.github.io/r102/)\n\n::: notes\nToday's talk is the first in a new series called **R102: MasteRing the Fundamentals**.\nThis is a new series of workshops intended as a continuation of the popular Intro to R for Clinical Data workshop we offer a few times a year. \nWe're designing these talks with beginners in mind, so if you're trying to figure out how to get started with R, or how to start applying it in your own work, these talks are for you!\n::: \n\n# Missing Values in R\n\n::: notes\nOkay! So this talk is a quick dip into some 102-level R. In other words, if you've had a little exposure to R before, such as through an Intro to R for Clinical Data workshop, this is hopefully the right level for you now. \nIf you're completely brand new to R, first of all: Welcome! You may find it tricky to actively follow along with the code today since I'm going to skim over some of the initial steps, but go ahead and give it a try, or just listen and watch if that feels more like the right speed. \n\nOur topic is missing values in R, one of the major stumbling blocks folks typically encounter when they start trying to use R to analyze data \"in the wild\". \nReal data are messy, and missingness is one of the main kinds of mess you'll have to deal with!\n\nPlease feel very free to stop me with questions, either by unmuting or in the chat – I've left plenty of extra time in the talk, so there's space for us to stop and talk about things. \n:::\n\n## What we're covering today\n\n::: {.incremental}\n* How to check the number and location of missing values in a dataframe\n* How to mark values as missing\n* How to use common arguments like `na.rm` and `na.action` to control how functions handle missingness\n* How to remove cases with missing values from a dataframe\n* NOT teaching statistical remedies for missingness, like imputation (but ask me about that later if you're curious!)\n:::\n\n## Why check for missingness?\n\n::: {.incremental}\n\n* Checking for missing data can help you know whether the data were read in correctly\n* Missingness will also impact your effective sample size\n* If your analysis will involve fixing missingness statistically, the first step is always **describing** the missingness\n\n:::\n\n::: notes\nOkay, so why would you want to check for missingness?\n[CLICK]\nChecking missing values can help you check whether the data were read in correctly. \nIn many cases, you know beforehand whether there should be any missing values on particular variables in your data because you know about how the data were collected, etc.\nAfter you import the data into R, checking for missingness can give you a sense for whether the data were imported correctly.\nFor example, if you were expecting some missingness on a given variable and you see none, it can give you a hint that the missing values in the raw data aren't being correctly interpreted by R.\n\n[CLICK]\nMissingness will also impact your effective sample size.\nWhen you have missing values, the sample size that you can actually use for your analysis is often reduced.\nFor example, if you collect 100 samples, but 20 of them are missing at least some of the measurements, you might only have 80 complete samples you can analyze.\n\n[CLICK]\nAnd lastly, if your analysis will involve fixing missingness statistically, the first step is always **describing** the missingness\nIf you have substantial missingness (a good rule of thumb is if 5% or more of your data are missing that would be considered substantial), then you may need special statistical techniques to be able to analyze the data without introducing bias.\nAs I said, such techniques are outside the scope of this talk, unfortunately, but there are lots of excellent papers on this, and tutorials available with instructions.\n\n:::\n\n## {{< fa book-open >}} Learn more\n\nFor an excellent introduction to different types of missing data and how to handle them statistically, read Rubin's classic paper [Inference and Missing Data](https://www.jstor.org/stable/2335739).\n\n::: notes\n\nI've got a few of these \"learn more\" slides thrown in throughout the presentation. They include links to resources I like for learning more about the topics we're covering. I won't click through to any of these resources now, but you have access to the slides so feel free to go back and review these links later if you like!\nThis link here is to one of my very favorite academic papers, Rubin 1976. \n\n:::\n\n## What does \"missing\" look like <br> in R? \n\n::: {.center-text}\n::: {.big-text}\n`NA`\n:::\n:::\n\n. . . \n\nRarely:\n\n* `NA_integer_`\n* `NA_real_`\n* `NA_complex_`\n* `NA_character_`\n\n::: notes\nDifferent statistical software mark missing values in different ways.\nIn R, missing values are marked with `NA`, which is short for \"Not Available\".\n\nTechnically, there are actually four additional kinds of `NA`, corresponding to different data types.\n\nFor most practical purposes, you don't need to know anything about these different kinds of `NA`, though; they all just mean \"missing\", and you can usually use `NA` to refer to all of them.\n:::\n\n## For example\n\nHere's an example of what some data with missing values might look like when printed in R:\n\n| sensor\\_id | PM2.5 | PM10 | O3 | NO2 |\n| ---- | --- | --- | --- | --- |\n| 0001 | 10 | 25 | 0.0 | 67 |\n| 0002 | 13 | 21 |  NA | 71 |\n| 0003 | 9  | NA |  NA | 64 |\n\n::: notes\nFor example, here's a small table of made up data.\nNote that the second and third rows have `NA` instead of numerical values for some of the measurements.\nThe `NA` indicates a lack of any information for each of those cells; those values are missing.\n\n:::\n\n## {{< fa book-open >}} Learn more\n\n**What about `NULL` and `NaN`?**\n\nIf you'd like to learn more, check out this [blog post explaining the difference between `NA` and `NULL`](https://www.r-bloggers.com/2010/04/r-na-vs-null/) and the [missing values chapter of R for Data Science (2e)](https://r4ds.hadley.nz/missing-values#nan).\n\n<br>\n\nIf you're just beginning in R, you can safely ignore the differences between `NA`, `NaN`, and `NULL` for now. \n\n::: notes\n\nIf you've been using R for a while, you may have seen `NULL` or `NaN` in some cases instead of `NA` when things are missing.\n\n`NULL` and `NaN` work a lot like `NA` but they're also a bit different --- they doesn't stand in for missing data the way `NA` does. \nInstead `NULL` shows up when you have an expression or function whose result is undefined (for example, a logical comparison whose result is neither `TRUE` nor `FALSE`), and `NaN` (short for \"not a number\") shows up when a calculation produces something other than a number, like the square root of -1.\n\n:::\n\n## How to check for missing values\n\n::: {.incremental}\n\n* Open the data in the Data Viewer and scan visually for `NA`s (to see examples of how to use `View()`, see this [tutorial on RStudio's data viewer](https://support.rstudio.com/hc/en-us/articles/205175388-Using-the-Data-Viewer-in-the-RStudio-IDE))\n* `summary()`\n* Many more options! For some handy visualizations of missingness, see the [`visdat` package](https://cran.r-project.org/web/packages/visdat/vignettes/using_visdat.html), and the [`missmap` function from the `Amelia` package](https://www.rdocumentation.org/packages/Amelia/versions/1.8.0/topics/missmap).\n\n:::\n\n::: notes\n[CLICK]\nOne way to see missing data in R is to take a look at the full dataset, either by printing it in the console or using `View()` to see it opened like a spreadsheet.\nThen you can just scan visually for `NA` cells, as in the example table in the previous section.\nIf your dataset is anything larger than a handful of rows and columns, though, you'll want a way to summarize that information without having to count everything by hand yourself.\n\n[CLICK] \nThere are many functions available to check for missing values in R, but one especially handy one is the `summary()` function.\nIt gives you some basic summary information about each variable in your data (minimum and maximum values, etc.), and will also tell you how many missing values you have for each variable.\nBecause it gives you summary statistics and missingness information at the same time, many people like to use it as a quick way to check their data as a start to their [exploratory data analysis](https://r4ds.had.co.nz/exploratory-data-analysis.html).\n\n[CLICK] There are also many more options for exploring your missing data! I like the `visdat` and `Amelia` packages in particular, but there are more. I think `summary()` is a great place to start, though, so that's what we'll focus on today.\n\n:::\n\n## Working with missing values in R\n\nTwo options:\n\n1. Work in the cloud: [https://posit.cloud/content/7522885](https://posit.cloud/content/7522885)\n2. Work on your computer: [https://github.com/arcus/r102](https://github.com/arcus/r102)\n\n::: notes\n\nOkay, enough preamble, it's time to start coding! \nBy far the best way to learn R is to practice, so work through this code yourself as you follow along.\n\nThis link will take you to Posit Cloud, which gives you a way to work with the code right in your browser without having to install anything on your machine. You will need to create a free account if you don't already have one. I'll click that link now, and log in with a different account than the one I used to create it so you can see what it looks like. It will take a few minutes to load.\n\nYou can also get all of the code for this talk directly from our GitHub and download it to work on your own machine. If you want to go this route, go to our GitHub repo and then find this green \"Code\" button. If click it you'll see you have several options, one of which is downloading a zip file -- click that and it will download all the files you need for this talk. Once it's done downloading, double click it to unzip the file. If you're comfortable using git, you can also clone the repo, or fork it if you'd like a personal copy. And if you don't know what cloning and forking are, no worries! Just use the zip file. \n\n:::\n\n## {{< fa book-open >}} Learn more\n\n::: {.columns .v-center-container}\n::: {.column width=\"50%\"}\n![](https://www.tidyverse.org/images/hex-tidyverse.png){fig-alt=\"tidyverse hex sticker logo.\"}\n:::\n::: {.column width=\"50%\"}\nLearn more about the tidyverse packages on the [tidyverse website](https://www.tidyverse.org/)!\n:::\n:::\n\n::: notes\nFirst, we need to load the `tidyverse` packages, since we'll be using several functions that come in the `tidyverse`, as well as a built-in dataset that comes with `tidyverse`.\n\nI'll also pause here for a moment to invite anyone that is having trouble getting access to the code, either with that Posit Cloud link or by downloading the files, to let us know in the chat. If you have the code pulled up and ready to go, please click the thumbs up reaction in Teams to let me know you're ready. \n:::\n\n## Load packages\n\nOnly if needed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n<br>\nEach R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n<br>\n\nOpen the file `missing_values_exercises.rmd` in the `exercises` folder.\n\n::: notes\nIf you're running this on your own computer rather than in the cloud instance we set up, you may need to run `install.packages` first if you haven't ever used the `tidyverse` packages before. If you're working in the cloud, then it's already been installed for you.\n\nEither way, the library command here is written out for you in the first chunk of the file `missing_values_exercises.rmd`. \nI'll go ahead and open that file now in my posit cloud instance, and click the green arrow to run that line.\n\nAnd I'll pause again here to invite folks to let us know in the chat if you're running into problems. We've got a couple very friendly R experts on the call, so one of them can hop into a breakout room with you real quick to troubleshoot. \n:::\n\n## The data\n\nIn the console or in the exercises rmd file, run the following command:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhead(msleep) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        name      genus  vore        order conservation\n1                    Cheetah   Acinonyx carni    Carnivora           lc\n2                 Owl monkey      Aotus  omni     Primates         <NA>\n3            Mountain beaver Aplodontia herbi     Rodentia           nt\n4 Greater short-tailed shrew    Blarina  omni Soricomorpha           lc\n5                        Cow        Bos herbi Artiodactyla domesticated\n6           Three-toed sloth   Bradypus herbi       Pilosa         <NA>\n  sleep_total sleep_rem sleep_cycle awake brainwt  bodywt\n1        12.1        NA          NA  11.9      NA  50.000\n2        17.0       1.8          NA   7.0 0.01550   0.480\n3        14.4       2.4          NA   9.6      NA   1.350\n4        14.9       2.3   0.1333333   9.1 0.00029   0.019\n5         4.0       0.7   0.6666667  20.0 0.42300 600.000\n6        14.4       2.2   0.7666667   9.6      NA   3.850\n```\n:::\n:::\n\n\n\n::: notes\nThis command is also written out for you in the `missing_values_exercises.rmd` file, in the next code chunk.\n\nLet's take a look at the data.\n[CLICK]\nYou should see the first six rows of the msleep data frame, which look like this. \nNote that this is one of the example datasets that comes built-in when you install the `tidyverse` package, so it's already available to you without you having to read it in or download anything.\n\nFor those of you that have worked in R before, you know importing data is a whole thing, so we're definitely skipping over a potentially tricky bit by using built-in data, but we only have so much time today and I wanted to be able to put as much time as possible towards actually working with the missing values. So we're just merrily skipping past all the importing and tidying that would normally happen.\n:::\n\n## About these data\n\nTo learn more about this dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?msleep\n```\n:::\n\n\n. . .\n\nFrom the help documentation: \n\n> This is an updated and expanded version of the mammals sleep dataset. Updated sleep times and weights were taken from V. M. Savage and G. B. West. A quantitative, theoretical framework for understanding mammalian sleep. Proceedings of the National Academy of Sciences, 104 (3):1051-1056, 2007. \n\n::: notes\nYou can look up help documentation for built-in datasets, just like there's help documentation for functions. Cool, huh?\n:::\n\n## How to check for missing values\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nsummary(msleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     name              genus               vore              order          \n Length:83          Length:83          Length:83          Length:83         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n conservation        sleep_total      sleep_rem      sleep_cycle    \n Length:83          Min.   : 1.90   Min.   :0.100   Min.   :0.1167  \n Class :character   1st Qu.: 7.85   1st Qu.:0.900   1st Qu.:0.1833  \n Mode  :character   Median :10.10   Median :1.500   Median :0.3333  \n                    Mean   :10.43   Mean   :1.875   Mean   :0.4396  \n                    3rd Qu.:13.75   3rd Qu.:2.400   3rd Qu.:0.5792  \n                    Max.   :19.90   Max.   :6.600   Max.   :1.5000  \n                                    NA's   :22      NA's   :51      \n     awake          brainwt            bodywt        \n Min.   : 4.10   Min.   :0.00014   Min.   :   0.005  \n 1st Qu.:10.25   1st Qu.:0.00290   1st Qu.:   0.174  \n Median :13.90   Median :0.01240   Median :   1.670  \n Mean   :13.57   Mean   :0.28158   Mean   : 166.136  \n 3rd Qu.:16.15   3rd Qu.:0.12550   3rd Qu.:  41.750  \n Max.   :22.10   Max.   :5.71200   Max.   :6654.000  \n                 NA's   :27                          \n```\n:::\n:::\n\n\n::: notes\nSo let's run the `summary()` function now, to see how many missing values we have for each of the variables in this data frame. \n\n[CLICK]\nThe first thing to notice here is that R is actually giving us different information for each variable depending on whether it's a character or numeric variable. The first few variables are character variables, and it doesn't try to print things like minimum and maximum for characters because it doesn't make sense to find the minimum of text. But look at the later variables, starting with `sleep_total`. \n\nNotice the bottom row of the summary statistics for `sleep_rem`, `sleep_cycle` and `brainwt`. It gives the count of `NA` values for each variable. The other numeric variables (`sleep_total`, `awake`, and `bodywt`) don't show anything for the `NA` count, which means they have no missing values.\n\nThe `summary` command is most useful for numeric and factor variables. It doesn't show us anything useful for the character variables. We can get better output for those by converting them to factors, though.\n:::\n\n## Come back to these slides later if you like :) \n\n<br>\nRemember, if you're viewing these slides online, you can hit `s` on your keyboard to show the speaker notes. \n\n::: notes\nIn the interest of time, I'm going to skip past the next few slides, which step through how you can convert these variables to factors. \nAfter converting them to factors, then `summary()` will show you the missing count for each one, just as it does for numeric variables. \n\nBut we don't actually need them converted to factors for anything else we're going to do in our exercises today, so we won't spend time on that now. \nI did want to leave the slides in here, though, in case you want to return to look through that content later!\n:::\n\n## Convert to factor\n\nWe could convert those variables to factors with a `mutate` command for each of the rows we want to convert, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep <- msleep |>\n  mutate(name = as.factor(name),\n         genus = as.factor(genus),\n         vore = as.factor(vore),\n         order = as.factor(order),\n         conservation = as.factor(conservation))\n```\n:::\n\n\n## Convert to factor\n\nBut in cases like this where we want to convert several variables all in the same way, we can do it faster with the `across` command:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3|4|\"}\nmsleep <- msleep |>\n  mutate(across(\n    where(is.character), \n    as.factor))\n```\n:::\n\n\n::: notes\nLet's break that down. We're using the `across` command to do the same thing across several columns. \n\n[CLICK] The first argument of `across` needs to tell it which columns to use. Here, we're telling it which columns to use with `where(is.character)` --- that will check each column against the test `is.character` and return `TRUE` if the column is of type character and `FALSE` if it's anything else. `where(is.character)` will therefore give us a list of all of the columns that are character columns. \n[CLICK] The second argument of `across` is what you want done to those columns. Here, we're saying we want it to apply the function `as.factor`. \n[CLICK] So taken together, this `mutate` command will pick all the columns from the data that are of type character and convert them to factor. Handy!\n\nNote that either way of converting these columns (either individually, or all at once using the `across` function) will result in the same clean dataframe.\n:::\n\n## {{< fa book-open >}} Learn more\n\nA few things from the above code that you might want to look into further:\n\n- Pipes! See the [2nd edition R4DS section on pipes](https://r4ds.hadley.nz/data-transform.html#sec-the-pipe)\n- If you're curious, a [comparison of the new (`|>`) and old (`%>%`) pipes](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/)\n- More about `mutate` and data transformation in general in [R4DS section on mutate](https://r4ds.hadley.nz/data-transform.html#sec-mutate)\n- More about `across` in the [tidyverse \"colwise\" vignette](https://dplyr.tidyverse.org/articles/colwise.html)\n\n## Summary again\n\nNow let's try `summary` again to see if we get more informative results for those first few columns:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nsummary(msleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        name             genus         vore   \n African elephant         : 1   Panthera    : 3   carni  :19  \n African giant pouched rat: 1   Spermophilus: 3   herbi  :32  \n African striped mouse    : 1   Equus       : 2   insecti: 5  \n Arctic fox               : 1   Vulpes      : 2   omni   :20  \n Arctic ground squirrel   : 1   Acinonyx    : 1   NA's   : 7  \n Asian elephant           : 1   Aotus       : 1               \n (Other)                  :77   (Other)     :71               \n          order          conservation  sleep_total      sleep_rem    \n Rodentia    :22   cd          : 2    Min.   : 1.90   Min.   :0.100  \n Carnivora   :12   domesticated:10    1st Qu.: 7.85   1st Qu.:0.900  \n Primates    :12   en          : 4    Median :10.10   Median :1.500  \n Artiodactyla: 6   lc          :27    Mean   :10.43   Mean   :1.875  \n Soricomorpha: 5   nt          : 4    3rd Qu.:13.75   3rd Qu.:2.400  \n Cetacea     : 3   vu          : 7    Max.   :19.90   Max.   :6.600  \n (Other)     :23   NA's        :29                    NA's   :22     \n  sleep_cycle         awake          brainwt            bodywt        \n Min.   :0.1167   Min.   : 4.10   Min.   :0.00014   Min.   :   0.005  \n 1st Qu.:0.1833   1st Qu.:10.25   1st Qu.:0.00290   1st Qu.:   0.174  \n Median :0.3333   Median :13.90   Median :0.01240   Median :   1.670  \n Mean   :0.4396   Mean   :13.57   Mean   :0.28158   Mean   : 166.136  \n 3rd Qu.:0.5792   3rd Qu.:16.15   3rd Qu.:0.12550   3rd Qu.:  41.750  \n Max.   :1.5000   Max.   :22.10   Max.   :5.71200   Max.   :6654.000  \n NA's   :51                       NA's   :27                          \n```\n:::\n:::\n\n\n::: notes\nNote that this time we're running it on the new `msleep` dataframe with those cleaned up factor variables.\n:::\n\n## {{< fa circle-question >}} Troubleshooting\n\nIf you make a mistake modifying the data, how can you undo it?\n\nIf this were a dataset we read in from an external file (like a .csv), you could just read it in again to get a fresh copy. \nBut how do you get a fresh copy of a built-in dataset? \n\n. . .\n\nTo reset the data to its original state, run `rm(msleep)` in the console. This will delete your current version of the data from R's environment, and you'll just be left with the original clean copy from the `ggplot2` package.\n\n::: notes\nRemember: If you run `rm(msleep)` to reset the data, you'll need to re-run any changes you made to the data that you want to keep, like converting columns to factor above. \n:::\n\n\n## Filtering\n\nAs a reminder, `filter()` selects just the rows from a dataframe that return TRUE for the logical test you put in. For example:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nfilter(msleep, vore == \"carni\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         name         genus  vore           order conservation\n1                     Cheetah      Acinonyx carni       Carnivora           lc\n2           Northern fur seal   Callorhinus carni       Carnivora           vu\n3                         Dog         Canis carni       Carnivora domesticated\n4        Long-nosed armadillo       Dasypus carni       Cingulata           lc\n5                Domestic cat         Felis carni       Carnivora domesticated\n6                 Pilot whale Globicephalus carni         Cetacea           cd\n7                   Gray seal  Haliochoerus carni       Carnivora           lc\n8        Thick-tailed opposum    Lutreolina carni Didelphimorphia           lc\n9                  Slow loris     Nyctibeus carni        Primates         <NA>\n10 Northern grasshopper mouse     Onychomys carni        Rodentia           lc\n11                      Tiger      Panthera carni       Carnivora           en\n12                     Jaguar      Panthera carni       Carnivora           nt\n13                       Lion      Panthera carni       Carnivora           vu\n14               Caspian seal         Phoca carni       Carnivora           vu\n15            Common porpoise      Phocoena carni         Cetacea           vu\n16       Bottle-nosed dolphin      Tursiops carni         Cetacea         <NA>\n17                      Genet       Genetta carni       Carnivora         <NA>\n18                 Arctic fox        Vulpes carni       Carnivora         <NA>\n19                    Red fox        Vulpes carni       Carnivora         <NA>\n   sleep_total sleep_rem sleep_cycle awake brainwt  bodywt\n1         12.1        NA          NA 11.90      NA  50.000\n2          8.7       1.4   0.3833333 15.30      NA  20.490\n3         10.1       2.9   0.3333333 13.90  0.0700  14.000\n4         17.4       3.1   0.3833333  6.60  0.0108   3.500\n5         12.5       3.2   0.4166667 11.50  0.0256   3.300\n6          2.7       0.1          NA 21.35      NA 800.000\n7          6.2       1.5          NA 17.80  0.3250  85.000\n8         19.4       6.6          NA  4.60      NA   0.370\n9         11.0        NA          NA 13.00  0.0125   1.400\n10        14.5        NA          NA  9.50      NA   0.028\n11        15.8        NA          NA  8.20      NA 162.564\n12        10.4        NA          NA 13.60  0.1570 100.000\n13        13.5        NA          NA 10.50      NA 161.499\n14         3.5       0.4          NA 20.50      NA  86.000\n15         5.6        NA          NA 18.45      NA  53.180\n16         5.2        NA          NA 18.80      NA 173.330\n17         6.3       1.3          NA 17.70  0.0175   2.000\n18        12.5        NA          NA 11.50  0.0445   3.380\n19         9.8       2.4   0.3500000 14.20  0.0504   4.230\n```\n:::\n:::\n\n\n::: notes\nNext we'll talk about how to filter missing values, but I want to start with a quick refresher on what the `filter()` function actually does. \n`filter()` selects just the rows from a dataframe that return TRUE for the logical test you put in.\n\n`filter(msleep, vore == \"carni\")` takes the `msleep` dataframe and checks each row to see whether `vore` equals `\"carni\"` in that row. \nRows where that's true will be included in the output, and any rows where that's false get dropped. \n\n[CLICK]\nThe resulting dataframe has all carnivores.\n:::\n\n## {{< fa circle-question >}} Troubleshooting\n\nRemember that the double equals sign is a comparison --- in the above code it's **asking** whether `vore` is equal to \"carni\", while a single equals sign is a \"setter\", and it will try to **make** `vore` equal to \"carni\".  \n\n::: notes\nOne tricky little thing I want to be sure to draw your attention to is the equals test. In R, if you want to test whether two things equal each other, you have to use `==`. \nJust a single `=` is a setter, used for assigning values, not testing whether two values are the same. \n:::\n\n## Filtering\n\nThese are some of the logical tests you might use:\n\n| logical condition | means | example |\n| :---: | --- | --- |\n| `x < y` | less than | `sleep_total < 10` |\n| `x > y`| greater than | `sleep_total > 4` |\n| `x == y` | equal to | `vore == \"carni\"` |\n| `x != y` | not equal to | `vore != \"carni\"` |\n\n## {{< fa book-open >}} Learn more\n\nFor more details about how `filter()` works, see the DART tutorial on data transformation, including [The `filter()` function](https://liascript.github.io/course/?https://raw.githubusercontent.com/arcus/education_modules/main/r_basics_transform_data/r_basics_transform_data.md#11).\n\n![](https://raw.githubusercontent.com/arcus/education_modules/main/r_basics_transform_data/media/dplyr_filter.png){fig-alt=\"A symbolic dataframe of four rows with a header, with two rows selected (highlighted in a different color), is transformed into a new dataframe with just the two selected rows and a header.\" width=\"80%\"}\n\n## Filtering with `NA`s\n\nLet's use `filter` to take a look at just the rows that have missing values for the brainwt variable.\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nfilter(msleep, brainwt == NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] name         genus        vore         order        conservation\n [6] sleep_total  sleep_rem    sleep_cycle  awake        brainwt     \n[11] bodywt      \n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n\n::: notes\nOkay, so how might we write a command to filter for missing values? \n\n[CLICK] That doesn't work!\n\nIn fact, if you're following along in RStudio, you may even have noticed a little yellow warning triangle appear at the left side of your screen, next to the line number with that code. If you hover your mouse over the warning sign, you'll see a message that says \"use 'is.na' to check whether an expression evaluates to NA\" --- that's because this is a very common mistake. Most people try `== NA` and `!= NA` to test whether something is or isn't missing, respectively, before they realize R won't allow that.\n:::\n\n## Filtering with `NA`s\n\nSo, let's try again to filter the data to just show rows where we have missing values for `brainwt`:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nfilter(msleep, is.na(brainwt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                             name         genus  vore           order\n1                         Cheetah      Acinonyx carni       Carnivora\n2                 Mountain beaver    Aplodontia herbi        Rodentia\n3                Three-toed sloth      Bradypus herbi          Pilosa\n4               Northern fur seal   Callorhinus carni       Carnivora\n5                    Vesper mouse       Calomys  <NA>        Rodentia\n6                          Grivet Cercopithecus  omni        Primates\n7       Western american chipmunk      Eutamias herbi        Rodentia\n8                         Giraffe       Giraffa herbi    Artiodactyla\n9                     Pilot whale Globicephalus carni         Cetacea\n10                 Mongoose lemur         Lemur herbi        Primates\n11           Thick-tailed opposum    Lutreolina carni Didelphimorphia\n12               Mongolian gerbil      Meriones herbi        Rodentia\n13                          Vole       Microtus herbi        Rodentia\n14           Round-tailed muskrat      Neofiber herbi        Rodentia\n15                           Degu       Octodon herbi        Rodentia\n16     Northern grasshopper mouse     Onychomys carni        Rodentia\n17                          Tiger      Panthera carni       Carnivora\n18                           Lion      Panthera carni       Carnivora\n19                          Potto  Perodicticus  omni        Primates\n20                     Deer mouse    Peromyscus  <NA>        Rodentia\n21                   Caspian seal         Phoca carni       Carnivora\n22                Common porpoise      Phocoena carni         Cetacea\n23                        Potoroo      Potorous herbi   Diprotodontia\n24          African striped mouse     Rhabdomys  omni        Rodentia\n25 Golden-mantled ground squirrel  Spermophilus herbi        Rodentia\n26      Eastern american chipmunk        Tamias herbi        Rodentia\n27           Bottle-nosed dolphin      Tursiops carni         Cetacea\n   conservation sleep_total sleep_rem sleep_cycle awake brainwt  bodywt\n1            lc        12.1        NA          NA 11.90      NA  50.000\n2            nt        14.4       2.4          NA  9.60      NA   1.350\n3          <NA>        14.4       2.2   0.7666667  9.60      NA   3.850\n4            vu         8.7       1.4   0.3833333 15.30      NA  20.490\n5          <NA>         7.0        NA          NA 17.00      NA   0.045\n6            lc        10.0       0.7          NA 14.00      NA   4.750\n7          <NA>        14.9        NA          NA  9.10      NA   0.071\n8            cd         1.9       0.4          NA 22.10      NA 899.995\n9            cd         2.7       0.1          NA 21.35      NA 800.000\n10           vu         9.5       0.9          NA 14.50      NA   1.670\n11           lc        19.4       6.6          NA  4.60      NA   0.370\n12           lc        14.2       1.9          NA  9.80      NA   0.053\n13         <NA>        12.8        NA          NA 11.20      NA   0.035\n14           nt        14.6        NA          NA  9.40      NA   0.266\n15           lc         7.7       0.9          NA 16.30      NA   0.210\n16           lc        14.5        NA          NA  9.50      NA   0.028\n17           en        15.8        NA          NA  8.20      NA 162.564\n18           vu        13.5        NA          NA 10.50      NA 161.499\n19           lc        11.0        NA          NA 13.00      NA   1.100\n20         <NA>        11.5        NA          NA 12.50      NA   0.021\n21           vu         3.5       0.4          NA 20.50      NA  86.000\n22           vu         5.6        NA          NA 18.45      NA  53.180\n23         <NA>        11.1       1.5          NA 12.90      NA   1.100\n24         <NA>         8.7        NA          NA 15.30      NA   0.044\n25           lc        15.9       3.0          NA  8.10      NA   0.205\n26         <NA>        15.8        NA          NA  8.20      NA   0.112\n27         <NA>         5.2        NA          NA 18.80      NA 173.330\n```\n:::\n:::\n\n\n::: notes\nInstead, to test whether something is missing, we have to use the `is.na()` function. You can negate the function with `!`, so `!is.na()` tests whether something is NOT missing (i.e. if there is present data there).\n:::\n\n## {{< fa rocket >}} Coding Challenge 1\n\n<br>\n\n**Your turn!**\n\n<br>\n\nLook in the `missing_values_exercises.rmd` file to find your first coding challenge. \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_ddd0110d\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n::: notes\nWe'll just work on this for a couple minutes and if you don't finish during that time, no sweat, just pause wherever you are and we'll take a look at the solutions together. \n\nI'll put a little comment in the chat now, and when you're finished working on this coding challenge, thumbs up that comment to let me know you're ready to move on.\n\nI also want to create another opportunity here for anyone that's having trouble getting access to the files, or having trouble loading the Posit cloud project, to drop and note in the chat so we can help!\n:::\n\n\n## Assigning values to missing\n\nYou may need to assign values to `NA` as part of data cleaning.\n\n::: notes\nYou may need to assign values to `NA` as part of data cleaning.\nWhen you're working with data, as part of your data exploration, you may notice values for some variables that you know are impossible or extremely unlikely.\n\nFor example, imagine you have a dataset called `df` with a variable called `rating`.\nYou know it's on a scale from 1-5, so respondents weren't able to rate it as anything outside of those options.\nAnd yet, when you read in the data you see there are a handful of -99 scores for this variable.\nDepending on the data collection mechanism, these may be the result of typos during data entry or a systematic way of marking invalid or missing responses.\n\nEither way, you don't want to treat those -99 scores as actual responses to the question (imagine how they would distort the estimate of the mean for that variable!); instead, you can mark them missing so they'll be excluded from analysis.\n:::\n\n## Assigning values to missing\n\nHere's some code to assign the -99 values in our pretend dataset to missing:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4|\"}\ndf <- mutate(df, \n             rating = ifelse(\n               rating == -99, \n               NA, \n               rating\n               ))\n```\n:::\n\n\n::: notes\nLet's break that down.\n\n[CLICK]\nWe're using a `mutate` command to change (\"mutate\") a variable (a column of data), and we're setting what the new value of this column should be by using a special conditional function, \n[CLICK] the `ifelse` function.\nThe `ifelse` command is what's called a ternary operator, and it has three parts:\n\n[CLICK] a conditional test\n[CLICK] a value to use if the test returns `TRUE`\n[CLICK] a value to use if the test returns `FALSE`\n\nOur `ifelse` statement begins with a conditional test, in this case `rating == -99`.\n:::\n\n\n## Assigning values to missing\n\nHere's some code to assign the -99 values in our pretend dataset to missing:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,3|4|5|\"}\ndf <- mutate(df, \n             rating = ifelse(\n               rating == -99, \n               NA, \n               rating\n               ))\n```\n:::\n\n\n::: notes\nFor each value in `rating`, it will run the test and return either `TRUE` or `FALSE`.\nIf it returns `TRUE`, then it assigns the next argument, [CLICK] in this case `NA`, which will mark that value missing.\n\n[CLICK]\nIf it returns `FALSE`, then it assigns the last argument, in this case `rating`, which will leave the value untouched.\n\n[CLICK]\nSo for any `rating` values that equal -99, we're asking it to replace them with `NA`, otherwise leave them as they were.\n:::\n\n## {{< fa rocket >}} Coding Challenge 2\n\n<br>\n\n**Your turn!**\n\n<br>\n\nGo back to the `missing_values_exercises.rmd` file to find your second coding challenge. \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_469317f3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## {{< fa book-open >}} Learn more\n\nFor more on `mutate` and `ifelse`, see the [R Basics: Data Transformation sections on `mutate`](https://liascript.github.io/course/?https://raw.githubusercontent.com/arcus/education_modules/main/r_basics_transform_data/r_basics_transform_data.md#the-mutate%28%29-function) and [logical operators](https://liascript.github.io/course/?https://raw.githubusercontent.com/arcus/education_modules/main/r_basics_transform_data/r_basics_transform_data.md#logical-operators), and the [`ifelse` section in the free online book Advanced R](https://adv-r.hadley.nz/control-flow.html#vectorised-if).\n\n\n## {{< fa circle-question >}} Troubleshooting\n\n**Are `ifelse` and `if_else` the same thing?**\n\nAlmost, but not quite!\n\n<br>\n\nThe function `ifelse` with no underscore is part of base R, and `if_else` is part of the dplyr package. They are very similar and do almost exactly the same thing, but the reason the dplyr developers bothered to write a new `if_else` fuction when the base `ifelse` was already available is because they wanted to make it *stricter*. \n\nIn general, stricter is better with functions. A function built with rigid requirements can be irritating because it throws errors more often, but it's actually much more dangerous to have loose functions quietly doing unexpected things than to have strict ones throwing errors. \n\nSo what's happening in this particular case is that `if_else` has a requirement `ifelse` doesn't, which is that whatever you put in for the \"if TRUE\" part of the operator has to be of the same type as whatever you put in for the \"if FALSE\" part. That's a reasonable requirement, because the output of either of these if else functions is a single vector that will have \"if TRUE\" values wherever the test returns TRUE and \"if FALSE\" values wherever the test returns FALSE. \n<br>\nThis runs fine:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep <- mutate(msleep, \n                       sleep_total = ifelse(sleep_total > 18, \n                                            NA, \n                                            sleep_total))\n```\n:::\n\n\nBut this generates an error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep <- mutate(msleep, \n                       sleep_total = if_else(sleep_total > 18, \n                                             NA, \n                                             sleep_total))\n```\n:::\n\n\nRemember when I told you there were secretly different kinds of `NA` under the hood, for the different data types in R, but that it would almost never come up and you wouldn't have to worry about that? So this is unfortunately one of the rare times when it does come up. Sorry! \n\nJust plain `NA` like we have here is assumed to be the `NA` for logical vectors unless you specify otherwise. So when `if_else` checks the \"if TRUE\" and \"if FALSE\" arguments to see if they're the same data type, it thinks your `NA` is for a logical vector and then it see that the values from `sleep_total` are numeric, and that's why it refuses to run. It thinks you're trying to mix apples and oranges. If you explicitly tell it you want numeric `NA`s, then it will run just fine. \n\n<br>\n\nThis works :)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep <- mutate(msleep, \n                       sleep_total = if_else(sleep_total > 18, \n                                             NA_real_, \n                                             sleep_total))\n```\n:::\n\n\n::: notes\n\nI'm not going to get into the weeds with this, but I just wanted to put in a slide here for anyone that might be curious: There are two different but very similar functions called `ifelse` and `if_else`, and although they are often interchangeable this code is actually one of the times they work differently.\n\nSo if you're curious, come back and read this later. If you're not, don't bother. :)\n\n:::\n\n## A note about removing outliers\n\nThese are all perfectly reasonable situations in which to mark values as missing: \n\n* Extremely unlikely outliers\n* Values that are logically impossible\n* Values that you know are meant to mark missing or invalid responses\n\n## A note about removing outliers\n\nBe very cautious of removing outliers that might be valid data, though!\n\n<br>\n\nTo learn more, read [The Extent and Consequences of P-Hacking in Science](https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1002106).\n\n. . .\n\n<br>\n\nIf you want to learn more about p-hacking and how to avoid it, reach out! :) hartmanr1@chop.edu\n\n::: notes\nNote, however that you should be cautious when excluding observations in general.\nDropping outliers can become problematic when you might be excluding valid data (i.e. not typos or impossible values).\nThis is an especially important problem when you decide whether or not to drop outliers after checking the results of your analysis both ways, because that can lead to unintentional bias in your results.\nThe process of running your statistical tests, identifying outliers, then running the tests again with outliers removed is a very common but very problematic procedure. \nAs a matter of fact, I was taught to do exactly that when I was in grad school, and some of you may have been taught that, too. \nBut it biases your results and contributes to the replicability crisis, so it's no longer considered acceptable practice.\n:::\n\n## Working around missing values\n\nWhat happens when you try to do things (statistical tests, visualizations, etc.) with missing values?\n\n::: notes\nMost real datasets have some missing values, and it's likely you'll want to be able to generate plots, run statistical analyses, etc. on those data, so how to work around the missing values is an important question.\n:::\n\n## Two basic options for how functions handle missingess\n\n::: {.incremental}\n* Run the function just on whatever data aren't missing ([\"listwise deletion\" or \"complete case analysis\"](https://www.theanalysisfactor.com/when-listwise-deletion-works))\n* Throw an error \n:::\n\n::: notes\nIn general, there are two basic options: \n\n[CLICK] \nSkip over missing stuff and just run the calculations on whatever data are available (this is sometimes called \"listwise deletion\" or \"complete case analysis\"), or \n\n[CLICK]\nstop everything and throw an error if there are missing values in the calculations.\n:::\n\n## More complex functions mean more options for missingness\n\nWe'll talk about missing values in the following example functions:\n\n::: {.incremental}\n- `mean`, which calculates the [mean or average](https://www.khanacademy.org/math/cc-sixth-grade-math/cc-6th-data-statistics/mean-and-median/v/statistics-intro-mean-median-and-mode?modal=1) of a set of numbers\n- `prcomp`, which runs a [Principal Components Analysis (PCA)](https://www.theanalysisfactor.com/tips-principal-component-analysis/)\n- `geom_point`, from the [ggplot2 data visualization package](https://ggplot2.tidyverse.org/index.html), which is used to create [scatterplots](https://ggplot2.tidyverse.org/reference/geom_point.html)\n- `cor`, which is used to generate a [correlation matrix](https://www.displayr.com/what-is-a-correlation-matrix/)\n:::\n\n::: notes\nAs you move to more complex functions, though, the options for handling missingness can become more complex as well.\nToday we'll walk through several R functions with different kinds of options for handling missingness. In particular, we'll talk about the following functions:\n:::\n\n## {{< fa heart >}} A little encouragement...\n\n**Are these functions new to you? No problem!**\n\nYou don't need to understand the underlying statistics for any of these functions to work through the R code and learn from the missingness examples.\n\n::: notes\nSo if you haven't made a correlation matrix before, or you've never heard of principal components analysis, no worries! That's probably the case for most of the folks here today, so know you're in good company.\nWe're not going to talk about what these tests are for or what they mean, we're just using them as examples to see different ways of handling missing values.\n\nIf you want to learn more about these functions and what they do, click through the links above for explanations and tutorials.\n:::\n\n## `na.rm`\n\nMany functions in R have an argument `na.rm` with options `TRUE` or `FALSE`.\n\nFor example, check out the help documentation for `mean`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n\n. . .\n\n<br>\nUnder **Arguments**, you'll see the description for `na.rm` is\n\n> a logical value indicating whether NA values should be stripped before the computation proceeds.\n\n::: notes\nFirst, we'll look at the argument `na.rm`, which is available in many functions in R, including the `mean` function.\nWe'll start by pulling up the help documentation for `mean` by running `?mean` in the console, or searching for it in the Help pane. \n\n[CLICK]\nIn other words, do you want to exclude missing observations and just do the calculation based on the available data? The default value is `na.rm = FALSE`, which means \"no, don't exclude missing values\".\n:::\n\n## `na.rm`\n\nLet's try that with the `brainwt` variable: \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmean(msleep$brainwt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n. . .\n\n<br>\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmean(msleep$brainwt, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2815814\n```\n:::\n:::\n\n\n::: notes\nWe'll try running `mean` on the `brainwt` variable from our `msleep` data. \nRemember that `brainwt` is one of the ones that **does** have some missing values. \nAnd we won't specify anything for the `na.rm` argument initially, which means it will just use its default setting, which we know from the help documentation is `na.rm = FALSE`. \n\n[CLICK]\nThere are some missing values in `brainwt`, so right now R is trying to take the mean of several numbers and a handful of `NA`s --- there's no way to get an average for something that's not there, so the result is `NA`.\n\n[CLICK] Try modifying the code to change the behavior to `na.rm = TRUE` \n\n[CLICK] Now we get a value! That's the average of the available data, ignoring the missing ones.\n\nYou'll see `na.rm` as an argument for many functions in R, usually with the default set to `FALSE`, as it is for `mean`.\n:::\n\n## `na.action`\n\nFor more complex statistical functions, there's often an `na.action` argument instead of `na.rm`.\n\n. . .\n<br>\nLet's take a look at the help documentation for `prcomp`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?prcomp\n```\n:::\n\n\n. . .\n\nUnder **Arguments**, you'll see the description for `na.action` is\n\n> a function which indicates what should happen when the data contain NAs. The default is set by the na.action setting of options, and is na.fail if that is unset. The ‘factory-fresh’ default is na.omit.\n\n::: notes\nFor more complex statistical functions, there's often an `na.action` argument instead of `na.rm`.\n\nWe'll start with the function `prcomp`, which is used to run Principal Components Analysis (PCA). For the purposes of this example, it's perfectly fine if you haven't run a PCA before, or even if you've never heard of it --- we'll just be using it as an example to explore how R handles missing values in statistical analyses.\n\n[CLICK]\nLike many R functions, `prcomp` has an argument called `na.action` which controls what happens when the function encounters missing values. The possible options are usually `na.fail`, `na.omit`, and `na.exclude`. \n\n[CLICK]\nWe can see from the help documentation that, unless you've changed some of your settings in R, the default option for `na.action` will be `na.omit`.\n\nThe `na.action` argument is computationally a bit more complicated than `na.rm` which just can be TRUE or FALSE, but actually they actually work kind of similarly.\n\nThe `na.fail` option for `na.action` is a lot like setting `na.rm = TRUE`, and it's usually the default, just like `na.rm = TRUE` usually is. \nWhen you have `na.action = na.fail`, you'll get an error if you try to run the function on data with missingness. \n\nThe `na.omit` and `na.exclude` options both work a lot like `na.rm = FALSE`; they will skip over missing values and run the function just on whatever data are available. \nThe difference between `na.omit` and `na.exclude` is pretty subtle, and in my experience it only really matters if you're going to be using the resulting model objects in kind of advanced ways. \n\n:::\n\n## `na.action`\n\nIf we run `prcomp` without specifying anything for `na.action`, it will use this default behavior:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nprcomp(~ sleep_total + sleep_rem + sleep_cycle + awake + brainwt + bodywt, \n       data = msleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStandard deviations (1, .., p=6):\n[1] 1.444588e+02 4.701466e+00 8.006693e-01 3.689651e-01 1.163014e-01\n[6] 8.736404e-16\n\nRotation (n x k) = (6 x 6):\n                      PC1         PC2           PC3           PC4           PC5\nsleep_total -0.0173107805  0.70127490  8.667993e-02 -0.0199139434 -0.0019684171\nsleep_rem   -0.0030493314  0.12265440 -9.923548e-01  0.0037779333 -0.0128203467\nsleep_cycle  0.0010997075 -0.02487631  1.324014e-03 -0.8138323340 -0.5805645002\nawake        0.0173107805 -0.70127490 -8.667993e-02  0.0199139434  0.0019684171\nbrainwt      0.0009228891 -0.01241062 -1.426396e-02 -0.5804041369  0.8141085321\nbodywt       0.9996946105  0.02469960 -1.332017e-05  0.0007529244 -0.0002201911\n                      PC6\nsleep_total -7.071068e-01\nsleep_rem   -6.383782e-16\nsleep_cycle  6.813398e-16\nawake       -7.071068e-01\nbrainwt     -1.419607e-15\nbodywt       2.775558e-17\n```\n:::\n:::\n\n\n::: notes\n\n[CLICK]\nHere's the output of that command. \nLike I said, we're not actually talking about these functions as statistical tests, so we'll just skip merrily past all the standard deviations and rotations and whathaveyou.\n\nOne important thing to notice here, though: Nothing in the output tells you that `prcomp` excluded rows with missing values from the analysis. That is how many functions in R work, and it's one reason why it's important to look at the help documentation for functions you're using, so you can see what the function's default behavior for handling missingness is. Without checking the help documentation, you might (wrongly) think that this PCA output was based on all of the observations in your data, not just the complete cases.\n:::\n\n## `na.action`\n\nLet's run `prcomp()` with `na.fail` for the `na.action` instead:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprcomp(~ sleep_total + sleep_rem + sleep_cycle + awake + brainwt + bodywt, \n       data = msleep, \n       na.action = na.fail)\n```\n:::\n\n\n. . . \n\n```\nError in na.fail.default(list(sleep_total = c(12.1, 17, 14.4, 14.9, 4,  : \n  missing values in object\n```  \n\n::: notes\nYou should now see an error that includes the message \"missing values in object\". Some people prefer to use `na.fail` for most functions, because they want to see an error message whenever they have missing values rather than R just silently dropping them.\n:::\n\n## Missing values warnings\n\nSome R functions will show a warning by default when they remove cases with missing values. For example, let's use `ggplot` to create a scatterplot of `bodywt` and `brainwt`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(msleep, aes(x=bodywt, y=brainwt)) +\n  geom_point()\n```\n:::\n\n\n. . .\n\n>Warning message:\n>Removed 27 rows containing missing values (geom_point). \n\n![](media/geom_point_example.png){fig-alt=\"Scatterplot with bodywt on the x-axis and brainwt on the y-axis.\" width=\"60%\"}\n\n\n::: notes\nIt produces the scatterplot we asked for, but you'll also see a warning saying \"Removed 27 rows containing missing values (geom_point)\" to remind you that it's ignoring any observations that are missing for either of the two variables we're plotting. (Note that this warning will appear above the plot in the \"R Console\" box just below the code chunk rather than on the plot itself. If you run the ggplot code in the console instead of running it as a chunk in the rmd document, then the plot itself will appear in the Plots pane and the warning will print in the console.)\n:::\n\n## Other arguments for handling missingness\n\nLet's take a look at the help documentation for `cor`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?cor\n```\n:::\n\n\n. . . \n\n> `na.rm`\t\n> logical. Should missing values be removed?\n>\n> `use`\t\n> an optional character string giving a method for computing covariances in the presence of missing values. This must be (an abbreviation of) one of the strings \"everything\", \"all.obs\", \"complete.obs\", \"na.or.complete\", or \"pairwise.complete.obs\".\n\n::: notes\nSome functions have more complicated options for how to handle missingness. For example, if you want to get correlations (or covariances) for several variables in your data, you have several options.\n\nThere are two arguments related to missing values: `na.rm` and `use`. You can scroll down to the **Details** section to read more about how they work. \n\nNote: The differences between the options is subtle, so don't stress if it feels like you don't understand what they all mean. In most cases, people want either `use = \"everything\"` or `use = \"pairwise.complete.obs\"` when they generate a correlation or covariance matrix, so those are the two most important options to focus on. Importantly, the default value for `use` is \"everything\".\n:::\n\n## Other arguments for handling missingness\n\nLet's look at a correlation matrix using the `msleep` data:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmsleep |> \n  select(sleep_total, sleep_rem, sleep_cycle, awake, brainwt, bodywt) |> \n  cor()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            sleep_total sleep_rem sleep_cycle      awake brainwt     bodywt\nsleep_total   1.0000000        NA          NA -0.9999986      NA -0.3120106\nsleep_rem            NA         1          NA         NA      NA         NA\nsleep_cycle          NA        NA           1         NA      NA         NA\nawake        -0.9999986        NA          NA  1.0000000      NA  0.3119801\nbrainwt              NA        NA          NA         NA       1         NA\nbodywt       -0.3120106        NA          NA  0.3119801      NA  1.0000000\n```\n:::\n:::\n\n\n::: notes\nThis code is going to start with the msleep dataframe, select just the listed variables from it (which is all the numeric variables in this dataset), and then send that to the `cor()` function to create a correlation matrix of those variables. \n\n[CLICK]\nSince we didn't supply anything for the `use` argument, it will be its default value, which is \"everything\". That returns an `NA` for any correlation where there were missing values on either of the two variables being compared.\n:::\n\n## Other arguments for handling missingness\n\nLet's try again, but this time change the behavior to calculate correlations for all pairwise complete observations:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmsleep |> \n  select(sleep_total, sleep_rem, sleep_cycle, awake, brainwt, bodywt) |> \n  cor(use = \"pairwise.complete.obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            sleep_total  sleep_rem sleep_cycle      awake    brainwt     bodywt\nsleep_total   1.0000000  0.7517550  -0.4737127 -0.9999986 -0.3604874 -0.3120106\nsleep_rem     0.7517550  1.0000000  -0.3381235 -0.7517713 -0.2213348 -0.3276507\nsleep_cycle  -0.4737127 -0.3381235   1.0000000  0.4737127  0.8516203  0.4178029\nawake        -0.9999986 -0.7517713   0.4737127  1.0000000  0.3604874  0.3119801\nbrainwt      -0.3604874 -0.2213348   0.8516203  0.3604874  1.0000000  0.9337822\nbodywt       -0.3120106 -0.3276507   0.4178029  0.3119801  0.9337822  1.0000000\n```\n:::\n:::\n\n\n::: notes\nLet's try again, but this time change the behavior to calculate correlations for all pairwise complete observations. \nTo do that, we're going to add an argument to the cor() function so it doesn't just do its default behavior. \nWe'll add the argument `use = \"pairwise.complete.obs\"`.\n\n[CLICK]\nNow we're seeing a correlation reported for every pair of variables, regardless of whether there were missing values present. For each pair of variables, `cor` is calculating the correlation between those two variables on whatever observations it can; that means it might use all of the cases to compute some correlations and just some observations for others. \n:::\n\n## {{< fa rocket >}} Check your understanding!\n\n<br>\n\n**True or False**: The output from R functions usually tells you how missing data were handled.\n\n::: notes\nFalse! \nAlthough some functions, like `geom_point`, provide a warning when dropping missing values, many functions in R do not. We saw an example of this with the `prcomp` function.\n:::\n\n## {{< fa rocket >}} Check your understanding!\n\n<br>\n\nIf you want R to skip over missing values and give you the results based only on the available data, which argument might you use?\n\n* `na.rm = TRUE`\n* `na.rm = FALSE`\n\n::: notes\n`na.rm = TRUE`!\nFor functions that have an `na.rm` argument, like `mean()` does, setting `na.rm = TRUE` will give you the result ignoring missing values.\nThe default setting for most of these functions is `na.rm = FALSE`, which will return `NA` as the result whenever there are missing values present.\n:::\n\n\n## Filtering out missing values\n\nSometimes you want to create a new version of your data that excludes cases with missing values.\nThis can be especially important if you want to make sure you're using a consistent dataset across several related analyses.\n\n::: notes\nFor example, let's say you ran a study on the relationship between cortisol levels and time spent on a challenging task.\nIn addition to measuring cortisol and how long participants spent on the task, you also collected a set of demographic variables and background information like age, education level, and socio-economic status.\n\nBecause the main focus of your analysis is on cortisol, you want to exclude any participants who have missing cortisol values (perhaps because of problems with the saliva sample they provided), even from parts of the analysis that don't use the cortisol data directly.\nFor example, you may begin your analysis by describing your participants with summary statistics on their demographic information (e.g. what is the median age in this sample?). If some of those participants have missing cortisol values, you want them excluded from the demographic summaries as well. The most straightforward way to do this is to save a new version of your data that only includes the observations you want in your final analysis, and to use that for all of your calculations.\n:::\n\n## Filtering out missing values\n\nThere are a few different options for removing rows with missing values in R:\n\n- `na.omit()`\n- `filter()` with `is.na()`\n\n\n## Filtering out missing values\n\nIf you want a version of your data with no missing values in it, you can use `na.omit` to remove any rows with missing values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep_nomissing <- na.omit(msleep)\n```\n:::\n\n\n. . .\n\n<br>\n\nHow many rows were in the original data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(msleep) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 83\n```\n:::\n:::\n\n\n. . .\n\nHow many *complete* rows are in the data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(msleep_nomissing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n\n::: notes\n`na.omit` removes rows with missing values on **any** variable. \nTo illustrate, save a new version of our dataframe called `msleep_nomissing`, which will have all observations with missing values removed. \nHow many rows are in the original data? And how many are left if we limit it to just rows with no missingness?\n:::\n\n## Filtering out missing values\n\nIf we want to create a version of the data that doesn't have any missing values for `brainwt` (but allows missing values for other variables), we can do that with `filter`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsleep_nomissing_brainwt <- filter(msleep, !is.na(brainwt))\n```\n:::\n\n\n::: notes\nYou might prefer to just pick which variable(s) you want complete data for, and only remove rows that have missing values in those key variables (potentially leaving rows that are missing on other variables).\n:::\n\n\n## {{< fa rocket >}} Check your understanding!\n\n<br>\n\nConsider the following code. Do you think it will run without an error?\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nmodel_data <- msleep |> \n  select(sleep_total, brainwt) |> \n  na.omit()\n\nlm(sleep_total ~ brainwt, \n   data = model_data,\n   na.action = na.fail)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = sleep_total ~ brainwt, data = model_data, na.action = na.fail)\n\nCoefficients:\n(Intercept)      brainwt  \n     10.631       -1.633  \n```\n:::\n:::\n\n\n::: notes\nTake your time with this one. I'll give you a couple minutes to think it through, then we'll discuss. And here's a tip: You can try running this code yourself if you want to test it!\n\nThis was a tricky one! Let's step through it together.\n\nThere's two main pieces to the code here. The first piece saves a dataframe called `model_data`, and then the second piece runs the `lm()` function. If you've never used `lm()` before, I hope you didn't let that trip you up! Even if you have no idea what the `lm()` function is doing, you can notice it has an `na.action` argument, just like we looked at for `prcomp()`. \n\nSo if we look at the bit with `lm()`, it looks like `lm()` is doing something with the `sleep_total` and `brainwt` variables, and it says `data = model_data`, so that suggests it's working with that dataframe. \nThen we see it has `na.action = na.fail`. That means the function should throw and error and not run if there are missing values present. When we tried that with `prcomp()` we did get an error right away, because there were missing values in the data. Are there missing values in the data here?\n\nTo answer that, let's look back at that first bit of code. It starts with the `msleep` dataframe and puts it through a couple steps with pipes. The first step is the `select()` function. We haven't talked about that much today; `select()` takes a dataframe and pulls out just the columns you list, dropping any others. So here it will take the `msleep` dataframe and then keep just the `sleep_total` and `brainwt` columns. \nThen there's another pipe sending that two-column dataframe to the `na.omit()` function. \nAs we talked about, `na.omit()` removes any rows that have missing data on any variables. So in this case, what we'll be left with at the end is a dataframe that has just the columns `sleep_total` and `brainwt`, and only the observations that had no missing values on either of those. \nSo there will be no missing values at all in that `model_data` dataframe. If there were missing values, we would expect the `lm()` function to throw an error since it has `na.action = na.fail`, but here we know there will be no missing values at all so this should run with no errors. \n\n[CLICK]\nAnd indeed it does!\n:::\n\n## What we covered\n\n::: {.incremental}\n- Using `summary()` to quickly check a dataframe for missing values\n- Filtering using `is.na()` to test for missingness\n- Assigning values to `NA` using `ifelse` or `if_else`\n- The `na.rm` argument\n- The `na.action` argument\n- Using `na.omit()` to remove all rows with missingness\n- a bunch of extras throughout on data transformations and data cleaning\n:::\n\n::: notes\nThat's a lot! \nSo don't expect to remember everything --- you have the slides and all the example code to go back to. My goal for you all is for you to come away with a general impression of how to work with missing values in R, and to be forewarned about some of the \"gotchas\" you might encounter. And now you have a resource to come back to if, for example, you find yourself wrestling with `na.action` options and you want some clear examples to refresh your memory.  \n:::\n\n# Additional resources\n\nThere are many excellent tutorials online about missing data in R. Many of them cover a lot of the same information presented here, but you may find a different perspective helpful to consolidate your learning. Here are a couple good ones:\n\n- [R 4 Data Science](https://r4ds.hadley.nz/missing-values)\n- [Just Enough R](https://benwhalley.github.io/just-enough-r/missingvalues.html)\n- [The Epidemiologist R Handbook](https://epirhandbook.com/en/missing-data.html)\n\nFor more powerful analysis of missing data in R, checkout the [`Amelia` package](https://gking.harvard.edu/amelia) and the [`mice` package](https://amices.org/mice/).\n\n# Practice opportunity\n\nWant to go through this material again? It's posted as [an interactive tutorial online](https://bit.ly/DART_r_missing_values) as part of [DART (Data and Analytics for Research Training)](https://arcus.github.io/education_modules/)!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}