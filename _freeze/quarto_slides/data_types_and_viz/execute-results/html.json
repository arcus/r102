{
  "hash": "dc885fdd824696f3384d2bfaa87f2607",
  "result": {
    "markdown": "---\ntitle: \"Data Types and Visualizations <br> in R <br>\"\nauthor: \"Keith Baxelbaum, Rose Hartman, and <br> Alexis Zavez (presenter) <br>\"\ninstitute: \"Data Science and Biostatistics Unit (DSBU) and <br> Arcus Education, DBHI\"\ndate: \"2024-06-03\"\n---\n\n\n-   Use keyboard arrow keys to\n    -   advance ( → ) and\n    -   go back ( ← )\n-   Type \"s\" to see speaker notes\n-   Type \"?\" to see other keyboard shortcuts\n\n\n::: {.cell}\n\n:::\n\n\n## Join the CHOP R User Group\n\n\n::: {.columns .v-center-container}\n::: {.column width=\"50%\"}\n![](media/chopr.png){fig-alt=\"CHOPR hex sticker logo\" width=\"100%\"}\n:::\n\n::: {.column width=\"50%\"}\n- Friendly help troubleshooting your R code\n- Announcements for upcoming talks, workshops, and conferences\n:::\n:::\n\nLink to join: [https://bit.ly/chopRusers](https://bit.ly/chopRusers)\n\n::: notes\nJust a few announcements before we get started. \nFor anyone here today that isn't already part of the CHOP R User group, I strongly encourage you to join (it is also open to Penn folks). The CHOP R User group has more than 400 members from all departments. This is great place to network with other R users, get help with coding problems, and learn about new packages, webinars, and conferences. We also have semi-regular meetings and workshops, like this one. \n\n:::\n\n## Come to R Office Hours!\n\n- Set up a meeting to get live help with your R code from our most experienced useRs\n- Office hours appointments can be one-on-one or open to the community\n\nLink to calendar: [https://bit.ly/chopROfficeHours](https://bit.ly/chopROfficeHours)\n\n::: aside\nWe're looking for more volunteers to lead appointments! Get in touch: hartmanr1@chop.edu\n:::\n\n::: notes\nWe have regular office hours appointments available to get R help. \nWe're offering two kinds of appointments: one-on-one, if you want individual help, or open appointments that are more of a community conversation about whatever R questions people bring up that day. \n\nWe set up a calendar online where you can book an appointment. \n\nAnd if you like this idea and you're an experienced R user yourself, consider joining us to offer appointments! It's just whatever times work for you, so we can set up a schedule around whatever other work you've got going on. Reach out to me via email or slack for details.  \n:::\n\n## Recap: Previous R102 Sessions\n\nThis is the fourth talk in a new series called **R102: MasteRing the\nFundamentals**\n\n<br>\n\n**Previous Talks:** \n\nMissing Values in R (March 2024)\n\nSummary Statistics in R (April 2024)\n\nReshaping Data with tidyr (May 2025)\n\n<br>\n\nTo watch previous talks or review slides: <br> <https://arcus.github.io/r102/>\n\n::: notes\nToday's talk is the fourth in a new series called **R102: MasteRing the\nFundamentals**. These workshops are intended as a continuation of the\npopular Intro to R for Clinical Data workshop we offer a few times a\nyear.\n\nWe're designing these talks with beginners in mind, so if you're trying\nto figure out how to get started with R, or how to start applying it in\nyour own work, these talks are for you! To see the schedule of talks,\ncheck out the website for the series. We're also posting links to slides\nand recordings there as well as they become available.\n:::\n\n# R 102: <br> Data Types and Visualizations \n\n::: notes\nOur topic today is Data Types and Visualizations in R. Data visualizations are a key component of any exploratory data analysis. We'll also discuss how different variable types determine the visualizations that are possible.\n\nPlease feel free to put any questions in the chat - we have a few additional team members who will try to answer your questions during the talk.\nIf there is extra time, we can also stop and talk about\nthings as a group. \n:::\n\n## What we're covering today\n\n. . .\n\n-   How to identify data types in R \n\n. . .\n\n\n-   A review of the data types that are available in R\n\n. . .\n\n-   Converting variables from one data type to another \n\n. . .\n\n-   Creating flexible visualizations of data in R\n\n## Identifying Data Types in R\n\nThere are several R functions that can return a variable's type\n\n. . .\n\n<br> \n\nToday we'll focus on using `str()`, which displays the internal **str**ucture of an R object\n\n. . .\n\n<br> \nOther options include `class()` and `typeof()` - read more about those [here!](https://www.rforecology.com/post/data-types-in-r/#:~:text=We%20can%20check%20if%20our,numeric()%20.&text=We%20can%20check%20our%20data,i.e.%2C%20numbers%20with%20decimals)\n\n\n## What are the most common data types?\n\n. . .\n\n<br> \n\nCharacter: each value is a string (e.g., \"female\")\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an example called x that contains either \"female\" or \"male\"\nx <-c(\"female\", \"male\", \"male\", \"female\")\n\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"female\" \"male\"   \"male\"   \"female\"\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:4] \"female\" \"male\" \"male\" \"female\"\n```\n:::\n:::\n\n\n## What are the most common data types?\n\n. . .\n\n<br> \n\nFactor: each value is a string, but the possible values are stored as levels within R \n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the character example to a factor \nx.factor <- as.factor(x)\nprint(x.factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] female male   male   female\nLevels: female male\n```\n:::\n\n```{.r .cell-code}\nstr(x.factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 2 levels \"female\",\"male\": 1 2 2 1\n```\n:::\n:::\n\n\n## What are the most common data types?\n\n. . .\n\n<br> \n\nNumeric: each value is a real number\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(-5.2,0,1.2,2.82,7.676)\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -5.200  0.000  1.200  2.820  7.676\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:5] -5.2 0 1.2 2.82 7.68\n```\n:::\n:::\n\n\n## Other data types\n\n. . .\n\nLogical: each value is either TRUE or FALSE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE, T, F)\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n logi [1:4] TRUE FALSE TRUE FALSE\n```\n:::\n:::\n\n\n. . .\n\nComplex: each value is a complex number \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c((1 + 2i), (2 + 3i))\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1+2i 2+3i\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n cplx [1:2] 1+2i 2+3i\n```\n:::\n:::\n\n\n## Character vs Factor Data Types\n\nCharacter and factor data types look similar: \n\n::: {.cell}\n\n```{.r .cell-code}\nx <-c(\"female\", \"male\", \"male\", \"female\")\n\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"female\" \"male\"   \"male\"   \"female\"\n```\n:::\n\n```{.r .cell-code}\nx.factor <- as.factor(x)\n\nprint(x.factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] female male   male   female\nLevels: female male\n```\n:::\n:::\n\n\n. . .\n\n* Factors are stored as numbers and a table of levels, which can save memory and computation time \n\n. . .\n\n\n* More computational options available for factors compared to characters (e.g., `summary()` function!)\n\nFor more on the `summary()` function, check out materials from our earlier talk on **Summary Statistics in R** [available here](https://arcus.github.io/r102/)\n\n. . .\n\n* Variables like name, study id, etc. can be stored as character vectors \n\n\n## Can we mix data types? \n\nLet's see what happens when we try to store different data types in \nthe same vector: \n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, 3.0, \"male\")\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"TRUE\" \"3\"    \"male\"\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:3] \"TRUE\" \"3\" \"male\"\n```\n:::\n:::\n\n\n. . .\n\n* We generally want to avoid mixing data types within one variable\n\n. . .\n\n\n* R will try to convert all values in the column to one data type\n\n. . .\n\n\n* Often, it doesn't make much sense to have multiple data types stored \nwithin the same variable \n\n::: notes\nIn this example of mixed data types, we can see that R converts all three value to the character data type.\n:::\n## Can we change data types? \n\nYes, using R's functions like `as.factor()`, `as.character()`, \nand `as.numeric()`: \n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <-c(\"female\", \"male\", \"male\", \"female\")\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"female\" \"male\"   \"male\"   \"female\"\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:4] \"female\" \"male\" \"male\" \"female\"\n```\n:::\n\n```{.r .cell-code}\nx <- as.factor(x) # convert from character to factor \nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] female male   male   female\nLevels: female male\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 2 levels \"female\",\"male\": 1 2 2 1\n```\n:::\n\n```{.r .cell-code}\nx <- as.character(x) # convert from factor back to character\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"female\" \"male\"   \"male\"   \"female\"\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:4] \"female\" \"male\" \"male\" \"female\"\n```\n:::\n:::\n\n\n## Can we change data types? \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <-c(\"3.7\", \"4.2\", \"5.0\")\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"3.7\" \"4.2\" \"5.0\"\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:3] \"3.7\" \"4.2\" \"5.0\"\n```\n:::\n\n```{.r .cell-code}\nx <- as.numeric(x) # convert from character to numeric \nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.7 4.2 5.0\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:3] 3.7 4.2 5\n```\n:::\n:::\n\n\n## How can we create visualizations in R?\n\nThere are two general options for creating figures in R: \n\n. . .\n\n<br>\nOption 1: Base R functions like `plot()`\n\n[Examples of figures created in base R](https://r-graph-gallery.com/base-R.html)\n\n\n. . .\n\n<br>\nOption 2: Using the tidyverse and functions like `ggplot()`\n\n[Examples of figures created with ggplot](https://r-graph-gallery.com/ggplot2-package.html)\n\n::: notes\nNext, we'll switch from data types and talk a little more about creating visualizations in R. \n:::\n\n## Some nice features of ggplot\n\n* All figures are built using a series of layers \n\n. . .\n\n\n* Able to save plots (or partial plots) as objects \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save basis of plot as an object called \"p\"\np <- ggplot(data = example_data, aes(x = x_variable, y = y_variable))\n\n# add a geometric object (points) and display the plot\np + geom_point()\n\n# add a different geometric object (line) and display the plot\np + geom_line()\n```\n:::\n\n\n. . .\n\n\n* Quickly create separate plots for each value of a factor variable using \nfacet_grid or facet_wrap\n\n. . .\n\n*Base R figures are still a good option!*\n\n::: notes\nWhile today we will be focusing on ggpplot, base R figures are also very flexible and can be an equally good option when deciding on how to create visualizations in R. \n:::\n\n## Data Types and Visualizations in R\n\nOption 1: Work in the cloud: [https://posit.cloud/content/7522885](https://posit.cloud/content/7522885)\n\nOption 2: Work on your computer: [https://github.com/arcus/r102](https://github.com/arcus/r102)\n\n::: notes\nTime to start coding! By far the best way to learn R is to practice, so\nwork through this code yourself as you follow along.\n\nThe first link will take you to Posit Cloud, which gives you a way to work\nwith the code right in your browser without having to install anything\non your machine. You will need to create a free account if you don't\nalready have one. I'll click that link now so you can see what it looks\nlike. It will take a few minutes to load.\n\nYou can also get all of the code for this talk directly from our GitHub\nand download it to work on your own machine. If you want to go this\nroute, go to our GitHub repo and then find this green \"Code\" button. If\nyou click that you'll see you have several options, one of which is\ndownloading a zip file -- click that and it will download all the files\nyou need for this talk. Once it's done downloading, double click it to\nunzip the file. If you're comfortable using git, you can also clone the\nrepo, or fork it if you'd like a personal copy. And if you don't know\nwhat cloning and forking are, no worries! Just use the zip file.\n:::\n\n## The packages we'll be using today\n\n![](https://www.tidyverse.org/images/hex-tidyverse.png){.absolute\ntop=\"200\" left=\"0\" width=\"300\" fig-alt=\"tidyverse hex sticker logo.\"}\n![](https://higgi13425.github.io/medicaldata/logo.png){.absolute\ntop=\"200\" left=\"350\" width=\"300\"\nfig-alt=\"medicaldata hex sticker logo.\"}\n![](https://ggplot2.tidyverse.org/logo.png){.absolute\ntop=\"200\" left=\"700\" width=\"300\" fig-alt=\"ggplot2 hex sticker logo.\"}\n\n. . .\n\n\nNote: ggplot2 is actually part of the tidyverse core set of packages\n\n::: notes\nFirst, we need to load the `tidyverse` packages, since we'll be using\nseveral functions that come in the `tidyverse`. We'll also load the\n`medicaldata` package, which includes several publicly available data\nsets with medical data. And we'll use the `ggplot2` package for\ncreating data visualizations.\n\nA quick note that the ggplot2 package is actually part of the tidyverse so we don't technically need to install it or load it separately. However, it can be installed and loaded separately from the tidyverse. \n:::\n\n## {{< fa book-open >}} Learn more\n\nThere's a lot of helpful information (including examples and tutorials)\non the package websites for each of the packages we'll be using:\n\n-   [tidyverse](https://www.tidyverse.org/)\n-   [medicaldata](https://higgi13425.github.io/medicaldata/)\n-   [ggplot2](https://ggplot2.tidyverse.org/)\n\n::: notes\nThese packages all have excellent websites available with lots of great\ntutorials and such, so definitely go back and look at those websites if\nyou want to learn more.\n\nI'll also pause here for a moment to invite anyone that is having\ntrouble getting access to the code, either with that Posit Cloud link or\nby downloading the files, to let us know in the chat. If you have the\ncode pulled up and ready to go, please \"thumbs up\" the comment in the chat \nto let us know you're ready.\n:::\n\n## Load packages\n\nOnly if needed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"tidyverse\", \"medicaldata\", \"ggplot2\"))\n```\n:::\n\n\n<br> Each R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(medicaldata) \nlibrary(ggplot2)\n```\n:::\n\n\n::: notes\nIf you're running this on your own computer rather than in the cloud\ninstance we set up, you may need to run `install.packages` first if you\nhaven't ever used these packages before. If you're working in the cloud,\nthen all three packages have already been installed for you.\n\nEither way, the library commands here are written out for you in the\nfirst chunk of the file `data_types_and_viz_exercises.rmd`. Go ahead and open\nthat file now, and click the green arrow to run those three lines.\n:::\n\n## The data\n\nIn the console or in the `data_types_and_viz_exercises.rmd` file, run the following command:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhead(covid_testing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 17\n  subject_id fake_first_name fake_last_name gender pan_day test_id clinic_name  \n       <dbl> <chr>           <chr>          <chr>    <dbl> <chr>   <chr>        \n1       1412 jhezane         westerling     female       4 covid   inpatient wa…\n2        533 penny           targaryen      female       7 covid   clinical lab \n3       9134 grunt           rivers         male         7 covid   clinical lab \n4       8518 melisandre      swyft          female       8 covid   clinical lab \n5       8967 rolley          karstark       male         8 covid   emergency de…\n6      11048 megga           karstark       female       8 covid   oncology day…\n# ℹ 10 more variables: result <chr>, demo_group <chr>, age <dbl>,\n#   drive_thru_ind <dbl>, ct_result <dbl>, orderset <dbl>, payor_group <chr>,\n#   patient_class <chr>, col_rec_tat <dbl>, rec_ver_tat <dbl>\n```\n:::\n:::\n\n\n::: notes\nThis command is also written out for you in the\n`data_types_and_viz_exercises.rmd` file, in the next code chunk.\n\nLet's take a look at the data. \\[click\\]\n\nYou should see the first six rows of the covid testing data frame,\nwhich look like this.\n\nNote that this is one of the example datasets that comes built-in when\nyou install the `medicaldata` package, so it's already available to you\nwithout you having to read it in or download anything.\n\nFor those of you that have worked in R before, you know importing data\nis a whole thing, so we're definitely skipping over a potentially tricky\nbit by using built-in data, but we only have so much time today. \n:::\n\n## About these data\n\nTo learn more about this dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?covid_testing\n```\n:::\n\n\n. . .\n\nFrom the help documentation:\n\n> This data set is from Amrom E. Obstfeld, who de-identified data on COVID-19\n> testing during 2020 at CHOP (Children's Hospital of Pennsylvania). \n> This data set contains data concerning testing for SARS-CoV2 via PCR as \n> well as associated metadata. \n> These data have been anonymized, time-shifted, and permuted.\n\n::: notes\nTo learn more about the dataset from the help documentation, we can type the command shown here\n:::\n\n## {{< fa book-open >}} Learn more\n\n-   To learn more about the covid data and the study behind\n    it, check out [this link](https://htmlpreview.github.io/?https://github.com/higgi13425/medicaldata/blob/master/man/description_docs/covid_desc.html).\n-   To learn more about the `medicaldata` R package these data are\n    published in, see the [`medicaldata` package\n    website](https://higgi13425.github.io/medicaldata/) -- and note that\n    the maintainers are always looking for more data contributions!\n\n## {{< fa rocket >}} Coding Challenge 1:\n\n::: r-fit-text\nYour turn!\n\nLook in the `data_types_and_viz_exercises.rmd` file to find your first coding\nchallenge.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_73d1ec51\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n::: notes\nWe'll just work on this for a couple minutes and if you don't finish\nduring that time, no problem, just pause wherever you are. Solution files are available and, if we have time at the end, we'll review the solution together.\n\n:::\n\n## Quick aside: using `str()`\n\nWe can also use `str()` on the entire covid_testing dataset all at once:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(covid_testing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [15,524 × 17] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ subject_id     : num [1:15524] 1412 533 9134 8518 8967 ...\n $ fake_first_name: chr [1:15524] \"jhezane\" \"penny\" \"grunt\" \"melisandre\" ...\n $ fake_last_name : chr [1:15524] \"westerling\" \"targaryen\" \"rivers\" \"swyft\" ...\n $ gender         : chr [1:15524] \"female\" \"female\" \"male\" \"female\" ...\n $ pan_day        : num [1:15524] 4 7 7 8 8 8 9 9 9 9 ...\n $ test_id        : chr [1:15524] \"covid\" \"covid\" \"covid\" \"covid\" ...\n $ clinic_name    : chr [1:15524] \"inpatient ward a\" \"clinical lab\" \"clinical lab\" \"clinical lab\" ...\n $ result         : chr [1:15524] \"negative\" \"negative\" \"negative\" \"negative\" ...\n $ demo_group     : chr [1:15524] \"patient\" \"patient\" \"patient\" \"patient\" ...\n $ age            : num [1:15524] 0 0 0.8 0.8 0.8 0.8 0.8 0 0 0.9 ...\n $ drive_thru_ind : num [1:15524] 0 1 1 1 0 0 1 0 1 1 ...\n $ ct_result      : num [1:15524] 45 45 45 45 45 45 45 45 45 45 ...\n $ orderset       : num [1:15524] 0 0 1 1 1 0 1 1 1 1 ...\n $ payor_group    : chr [1:15524] \"government\" \"commercial\" NA NA ...\n $ patient_class  : chr [1:15524] \"inpatient\" \"not applicable\" NA NA ...\n $ col_rec_tat    : num [1:15524] 1.4 2.3 7.3 5.8 1.2 1.4 2.6 0.7 1 7.1 ...\n $ rec_ver_tat    : num [1:15524] 5.2 5.8 4.7 5 6.4 7 4.2 6.3 5.6 7 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   subject_id = col_double(),\n  ..   fake_first_name = col_character(),\n  ..   fake_last_name = col_character(),\n  ..   gender = col_character(),\n  ..   pan_day = col_double(),\n  ..   test_id = col_character(),\n  ..   clinic_name = col_character(),\n  ..   result = col_character(),\n  ..   demo_group = col_character(),\n  ..   age = col_double(),\n  ..   drive_thru_ind = col_double(),\n  ..   ct_result = col_double(),\n  ..   orderset = col_double(),\n  ..   payor_group = col_character(),\n  ..   patient_class = col_character(),\n  ..   col_rec_tat = col_double(),\n  ..   rec_ver_tat = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n\n<br> \n\n::: notes\nYou should see a record for each of the 17 variables in the data, with a set of summary statistics printed under each. \n\nYou can see that this dataset has a lot of character variables, for which many R functions, like summary(), don't provide summary statistics. We might want to consider converting some of these, like gender, to factors, in order to get more helpful summary information when doing data analysis. However, that isn't the focus of today's presentation so we will leave the dataset as is for now. \n:::\n\n## ggplot2 for Visualizations\n\n## Example 1: Scatterplot (single color)\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nbaseplot <- ggplot(data = covid_testing, # dataset to use for plot\n                   mapping = aes( # list of aesthetic mappings to use for plot\n                             x = pan_day, # x-axis variable\n                             y = ct_result # y-axis variable\n                             ))\nbaseplot\n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n::: notes\nWe'll start with a simple scatterplot to demonstrate some of the aspects of ggplot. The primary inputs for a ggplot figure are shown here.\n\nIf we try to print the ggplot object with only data and mapping specified, you can see that the axes are populated but no visualization is generated. \n\n:::\n\n## Example 1: Scatterplot (single color)\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|\"}\nbaseplot + \n  geom_point() # adds the points to the scatterplot\n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\nClick [here](https://r-graph-gallery.com/ggplot2-package.html) for the full list of geom_ options\n\n::: notes\nIn order to generate a visualization, we'll need to specify another layer in our ggplot. For example, if we want to create a scatterplot we would use a geom_point layer to add data points. [click]\n\nIn addition to geom_point, there are many other options including geom_line (line graph) and geom_histogram (histogram). A full list of geom_ options and examples is available at this link. \n\nNote: Depending on your R settings, you may see a warning message when running this bit of code which says \"Removed 209 rows containing missing values or values outside the scale range.\" This is because 209 individuals are missing values for the ct_result variable on the y axis. \n:::\n\n## Changing the color of the points\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|3|\"}\nbaseplot + \n  geom_point(  # adds the points to the scatterplot\n    color = \"red\" # sets the color of the points to \"red\"\n    )\n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n::: notes\nGGplot is very customizable. Each of the geom_ layers has several arguments to customize colors, sizes, and shapes. In this example, we use the color argument to set all of the points to red. \n:::\n\n## Example 2: Scatterplot (color by variable)\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|5|\"}\nggplot(data = covid_testing, # dataset to use for plot\n                   mapping = aes( # list of aesthetic mappings to use for plot\n                             x = pan_day, # x-axis variable\n                             y = ct_result, # y-axis variable\n                             color = drive_thru_ind # color variable\n                             )\n       ) + \n  geom_point() # adds the points to the scatterplot\n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(covid_testing$drive_thru_ind)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   0    1 \n7537 7987 \n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(covid_testing$drive_thru_ind)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:15524] 0 1 1 1 0 0 1 0 1 1 ...\n```\n:::\n:::\n\n\n::: notes\nInstead of having all of points in a single color, we may want to color the points by a different variable in the dataset. One way to do this is to add a color argument to the first section of ggplot code.[click] This will result in points colored by drive_thru_ind. [click]\n\nYou may have noticed that drive_thru_ind is a binary variable which only takes on two values: 0 or 1. [click] However, the legend in our scatterplot represents drive_thru_ind on a continuous 0 to 1 scale, rather than binary. [click]\n\nThis is because drive_thru_ind is coded as a numeric variable in our dataset.\n:::\n\n## Converting drive_thru_ind to a factor\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|5|\"}\nggplot(data = covid_testing, # dataset to use for plot\n                   mapping = aes( # list of aesthetic mappings to use for plot\n                             x = pan_day, # x-axis variable\n                             y = ct_result, # y-axis variable\n                             color = as.factor(drive_thru_ind) # color variable\n                             )\n       ) + \n  geom_point() # adds the points to the scatterplot\n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n::: notes\nSince drive_thru_ind can only take on two values, it may be better to treat this variable as a factor (rather than numeric). This code shows one way to quickly do this within the ggplot function. Alternatively, we could change the data type in the original dataset, but this is a quick change that will only impact the plot itself. [click]\n\nNow we can see that the legend is updated to only show two discrete values, 0 and 1.\n\n:::\n\n## Changing the color of the points\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|9-10|\"}\nggplot(data = covid_testing, # dataset to use for plot\n                   mapping = aes( # list of aesthetic mappings to use for plot\n                             x = pan_day, # x-axis variable\n                             y = ct_result, # y-axis variable\n                             color = as.factor(drive_thru_ind) # color variable\n                             )\n       ) + \n  geom_point() + # adds the points to the scatterplot\n  scale_color_manual(values = c(\"0\" = 'blue', # sets colors for each level\n                                \"1\" = 'red'))\n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-25-1.png){width=960}\n:::\n:::\n\n\n::: notes\nNext, we'll talk about changing some of the aesthetic aspects of the plot. For example, we may want to specify the colors for the points. This can be done by adding the scale_color_manual layer to the ggplot code.[click] Here, we specify that 0's should colored blue while 1's should be colored red. [click] \n\nIn addition, you might find that the default axis labels and default legend title \"as.factor()\" are not ideal. We can change these in the next slide.  \n:::\n\n## Adding plot titles and labels\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|11-14|\"}\nggplot(data = covid_testing, # dataset to use for plot\n                   mapping = aes( # list of aesthetic mappings to use for plot\n                             x = pan_day, # x-axis variable\n                             y = ct_result, # y-axis variable\n                             color = as.factor(drive_thru_ind)\n                             )\n       ) + \n  geom_point() + \n  scale_color_manual(values = c(\"0\" = 'blue', # sets colors for each level\n                                \"1\" = 'red')) + \n  ggtitle(\"CT Results by Pandemic Day\") + # adds title to plot\n  xlab(\"Pandemic Day\") + # changes x-axis label\n  ylab(\"CT Result\") + # changes y-axis label \n  labs(color = \"Drive Thru Indicator\") # changes legend label\n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-26-1.png){width=960}\n:::\n:::\n\n\n::: notes\nTo make these changes, and add a title to our figure, we can add several other ggplot options to our code to specify title, axis labels, and the legend label. [click]\n\n[click]\nAs I mentioned earlier, ggplot has a lot of custom options. For example, we may want the title to be in the center of the plot or we may want to use another theme/style for our figure. We can change these on the next slide.\n\n:::\n\n## Changing plot placement and theme \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|15-17|\"}\nggplot(data = covid_testing, # dataset to use for plot\n                   mapping = aes( # list of aesthetic mappings to use for plot\n                             x = pan_day, # x-axis variable\n                             y = ct_result, # y-axis variable\n                             color = as.factor(drive_thru_ind)\n                             )\n       ) + \n  geom_point() + \n  scale_color_manual(values = c(\"0\" = 'blue', # sets colors for each level\n                                \"1\" = 'red')) + \n  ggtitle(\"CT Results by Pandemic Day\") + # adds title to plot\n  xlab(\"Pandemic Day\") + # changes x-axis label\n  ylab(\"CT Result\") + # changes y-axis label \n  labs(color = \"Drive Thru Indicator\") + # changes legend label\n  theme_bw() + # changes plot theme to black and white\n  theme(plot.title = element_text(hjust = 0.5), # centers plot title\n        legend.position=\"bottom\") # moves legend to bottom \n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\n\n::: notes\nThere are several theme options available within ggplot. Today, we are just going to look at one theme, the black and white theme, by adding theme_bw() to our code.[click] \nWe can also add additional theme options like centering the plot title and moving the legend to the bottom. \n:::\n\n## Using facet_wrap\n\nSuppose we are interested in separating the points in the previous scatterplot based on patient gender \n\n. . .\n\nggplot's `facet_wrap()` function provides a easy way to do this: \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|18|\"}\nggplot(data = covid_testing, # dataset to use for plot\n                   mapping = aes( # list of aesthetic mappings to use for plot\n                             x = pan_day, # x-axis variable\n                             y = ct_result, # y-axis variable\n                             color = as.factor(drive_thru_ind)\n                             )\n       ) + \n  geom_point() + \n  scale_color_manual(values = c(\"0\" = 'blue', # sets colors for each level\n                                \"1\" = 'red')) + \n  ggtitle(\"CT Results by Pandemic Day\") + # adds title to plot\n  xlab(\"Pandemic Day\") + # changes x-axis label\n  ylab(\"CT Result\") + # changes y-axis label \n  labs(color = \"Drive Thru Indicator\") + # changes legend label\n  theme_bw() + # changes plot theme to black and white\n  theme(plot.title = element_text(hjust = 0.5), # centers plot title\n        legend.position=\"bottom\") +  # moves legend to bottom \n  facet_wrap(~gender)\n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n\n\n## {{< fa book-open >}} Learn more\n\n-   In addition to `facet_wrap()`, there is a similar option called `facet_grid()`\n\n-   To learn more about faceting, including the differences between these two functions, check out [this link](https://ggplot2.tidyverse.org/articles/faq-faceting.html)\n\n-   To learn more about the different ggplot themes that are available, check out [this link](https://ggplot2.tidyverse.org/reference/ggtheme.html)\n\n## {{< fa rocket >}} Coding Challenge 2:\n\n::: r-fit-text\nYour turn!\n\nLook in the `data_types_and_viz_exercises.rmd` file to find your second coding\nchallenge.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_3b238d8a\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n::: notes\nWe'll just work on this for a couple minutes and if you don't finish\nduring that time, no problem, just pause wherever you are.\n:::\n\n## Aside: \"color\" vs. \"fill\"\n\n<br> \n\n`scale_color_manual()`: used to color lines and points \n\n\n`scale_fill_manual()`: used to color fillable objects (e.g. histograms)\n\n<br> \n\n**Note:** We will also need to modify the code for the legend title from\n`labs(color = \"Label Text\")` to `labs(fill = \"Label Text\")` \n\n::: notes\nSo far, we have been using scale_color_manual to specify colors for the scatterplot points. This is also the option we would use if we were making a line graph, and interested in specifying line color. However, ggplot has another option, called scale_fill_manual, which is used to color fillable objects like histograms. \n\nIt's important to note that when we swich from \"color\" to \"fill\" we will also have to slightly modify our code for the legend as noted here. \n\nThis can be a little confusing - so next we will walk through an example that uses the fill options.\n:::\n\n## Example 3: Histogram (color by variable)\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|4|6-8|\"}\nggplot(data = covid_testing, # dataset to use for plot\n                   mapping = aes( # list of aesthetic mappings to use for plot\n                             x = pan_day, # x-axis variable\n                             fill = gender) # note: using \"fill\" not \"color\"\n       ) + \n  geom_histogram(# adds the histograms to the graph\n    bins = 10, # number of bins \n    color = \"black\"# color of bin outline \n    ) \n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n\n::: notes\nIn this next example, we are making a histogram instead of a scatterplot, representing the number of patients by pandemic day. We'd like to color the bars of the histogram by patient genderr. Instead of specifying the color option, we now need to use the fill option.[click] To build the histogram, we use the geom_histogram layer.\n:::\n\n## Changing the color of the bars\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|10-11|\"}\nggplot(data = covid_testing, # dataset to use for plot\n                   mapping = aes( # list of aesthetic mappings to use for plot\n                             x = pan_day, # x-axis variable\n                             fill = gender) # note: using \"fill\" not \"color\"\n       ) + \n  geom_histogram(# adds the histograms to the graph\n    bins = 10, # number of bins \n    color = \"black\"# color of bin outline \n    ) +\n  scale_fill_manual(values = c(\"female\" = 'lightgrey', # sets colors for each level\n                                \"male\" = 'darkgrey'))\n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-31-1.png){width=960}\n:::\n:::\n\n\n::: notes\nTo change the color of the histogram bars, we need to use the scale_fill_manual() option instead of scale_color_manual()\n:::\n\n## Modifying plot titles, labels, and theme\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|12-18|\"}\nggplot(data = covid_testing, # dataset to use for plot\n                   mapping = aes( # list of aesthetic mappings to use for plot\n                             x = pan_day, # x-axis variable\n                             fill = gender) # note: using \"fill\" not \"color\"\n       ) + \n  geom_histogram(# adds the histograms to the graph\n    bins = 10, # number of bins \n    color = \"black\"# color of bin outline \n    ) +\n  scale_fill_manual(values = c(\"female\" = 'lightgrey', # sets colors for each level\n                                \"male\" = 'darkgrey')) + \n  ggtitle(\"Number of Patients by Pandemic Day\") + # adds title to plot\n  xlab(\"Pandemic Day\") + # changes x-axis label\n  ylab(\"Number of Patients\") + # changes y-axis label \n  labs(fill = \"Patient Gender\") + # changes legend label (note this says \"fill\")\n  theme_bw() + # changes plot theme to black and white\n  theme(plot.title = element_text(hjust = 0.5), # centers plot title\n        legend.position=\"bottom\") # moves legend to bottom \n```\n\n::: {.cell-output-display}\n![](data_types_and_viz_files/figure-revealjs/unnamed-chunk-32-1.png){width=960}\n:::\n:::\n\n\n::: notes\nWe can also customize the output using many of the same options from the previous example. \n:::\n\n\n## Exporting a Visualization\n\nThe `ggsave()` function is a convenient option for exporting a ggplot object: \n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"Figure_Name.png\", \n       plot = last_plot(),\n       path = NULL) # Will default to your working directory \n```\n:::\n\n\n. . .\n\n<br> \n\nThere are lots of options regarding plot specifications like dimensions \nand resolution - learn more [here!](https://ggplot2.tidyverse.org/reference/ggsave.html)\n\n::: notes\nFinally, you will likely need to export any figure you make so that it can be included in a presentation or publication. The ggsave function is a convenient and flexible way to do this. You can run this code right after a ggplot figure is created and a figure will be exported to the directory of your choice.\n:::\n\n## {{< fa rocket >}} Coding Challenge 3: Homework! \n\nTry to recreate this figure: \n\n![](media/Data_Types_and_Viz_Coding_Challenge_3_Figure.png){.absolute\ntop=\"220\" left=\"0\" width=\"800\" fig-alt=\"examplefigure.\"}\n\n## {{< fa rocket >}} Coding Challenge 3: Homework! \n\nDon't struggle in silence!\n\n::: incremental\n-   Ask questions and share tips on the CHOPR slack\n-   Come to [R Office Hours](https://bit.ly/chopROfficeHours) to show\n    off your progress and get help\n-   There's a solution available in `data_types_and_viz_solutions.Rmd`, but\n    you'll learn a lot more if you try it yourself first\n:::\n\n## What we covered\n\n::: incremental\n-   A review of the data types that are available in R\n-   Converting variables from one data type to another\n-   Creating flexible scatterplots and histograms of data using ggplot\n-   Exporting ggplot figures \n:::\n\n::: notes\nThat's a lot! So don't expect to remember everything --- you have the\nslides and all the example code to go back to. But hopefully you now have a general impression of data types and how to go about creating ggplot visualizations in R. In addition, you now have some code to copy and use as a starting place.\n:::\n\n# Shameless Plug\n\nHave funding for your research project and interested in working with an experienced biostatistician or data scientist to analyze your data?\n<br>\n<br>\n\n. . .\n\nThe Data Science and Biostatistics Unit (DSBU) is DBHi’s and CHOP Research Institute’s centralized service unit for biostatistics and data science analysis support. Reach out to Alexis Zavez (zaveza\\@chop.edu) or Keith Baxelbaum (baxelbaumk\\@chop.edu) for more info! \n\n# Thank you!\n\n\n",
    "supporting": [
      "data_types_and_viz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}